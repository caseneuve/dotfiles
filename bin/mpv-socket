#!/bin/bash

#  Path:        ~/.dotfiles/bin/mpv-socket
#  Created:     2018-07-14, 09:12    @toshiba
#  Last update: 2019-06-05, 10:56:33 @x200
#* Doc:
# requires socat
# todo: zmienić kolory (bez kolorowego tła)
# FIXME: playlist -P działa tylko dla url
# BUG: niepotrzebnie robi curla gdy wkleja się ścieżkę do pliku (dlaczego?)
# TODO: check if file is a socket → [[ -S file ]]
# TODO: -p (playlist) → show real number, track title (not filename), and * for currenlty playing, status (play/pause)
# DONE: i3bloki nie resetują się po komendzie "stop"
# DONE: zamienić preambułę na funkcje, żeby program nie wychodził bez podania usage (gdy nic nie gra)
# DONE: -t title → jak podzielić tytuły, żeby wyświetlały się w osobnych liniach?

#* VARIABLES:
SOC=/tmp/mpv
POSITION=$(echo '{ "command": ["get_property_string", "time-pos"] }' | socat - $SOC 2>/dev/null | jq .data | xargs | cut -d'.' -f 1)
REMAINING=$(echo '{ "command": ["get_property_string", "time-remaining"] }' | socat - $SOC 2>/dev/null | jq .data | xargs | cut -d'.' -f 1)
PLAYPOS=$(echo '{ "command": ["get_property_string", "playlist-pos"] }' | socat - $SOC 2>/dev/null | jq .data | xargs)
[[ $PLAYPOS ]] && PLAYPOS=$(( $PLAYPOS + 1 ))
PLAYTOT=$(echo '{ "command": ["get_property_string", "playlist-count"] }' | socat - $SOC 2>/dev/null | jq .data | xargs)
METADATA=$(echo '{ "command": ["get_property", "filtered-metadata"] }' | socat - $SOC 2>/dev/null)
[[ "$(echo $METADATA | jq .data)" = "{}" ]] && METADATA=""
#VIDEOP=`echo '{ "command": ["get_property", "video"] }' | socat - $SOC 2>/dev/null | jq .data`

#** - colors @var
PLAY_COLOR=$(awk  '/^*i3blue/ {print $2}' $HOME/.Xresources)
PAUSE_COLOR=$(awk '/^*i3grey/ {print $2}' $HOME/.Xresources)
WEIGHT=normal
BGPLAY=$PLAY_COLOR
FGPAUSE=$PAUSE_COLOR
#BGPAUSE="#191f26"

#** - metadata @var
if [[ $METADATA ]]; then
    ARTIST=$(echo $METADATA | jq .data.Artist | xargs)
    TITLE=$(echo $METADATA | jq .data.Title | xargs)
    ALBUM=$(echo $METADATA | jq .data.Album | xargs)
    GENRE=$(echo $METADATA | jq .data.Genre | xargs)
    TRACK=$(echo $METADATA | jq .data.Track | xargs)
fi

#** - playlist & source @var
PLAYLIST=$(echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq .data[].filename | xargs | tr ' ' '\n')
SOURCE=$(echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq '.data[] | select (.| has("current")) | .filename' | xargs)

if [[ $SOURCE =~ "http" ]]; then
    wget -qO- $SOURCE > /tmp/mpvurl
    TITLE=$(cat /tmp/mpvurl | grep -iPo '(?<=<title>)(.*)(?=</title>)')
    ARTIST=$(cat /tmp/mpvurl | grep '"name":' | sed 's/"//g' | awk '{print $2}')
else
    FILENAME=$(echo '{ "command": ["get_property", "filename" ] }' | socat - $SOC 2>/dev/null | jq .data | xargs)
fi

STATUS=$(echo '{ "command": ["get_property", "pause"] }' | socat - $SOC 2>/dev/null | jq .data)
[[ "$STATUS" = "false" ]] && STATUS="PLAY" || STATUS="PAUSE"

#* FUNCTIONS:
#** - playlist @func
playlist(){
    #[[ $POSITION ]] || echo "mpv-socket: no active playlist"; exit
    PLISTFILE=/tmp/mpv-playlist
    [[ -f $PLISTFILE ]] && rm $PLISTFILE
    c=1
#    if [[ $SOURCE =~ "http" ]]; then
    for i in $PLAYLIST; do
        echo "$c. $(curl $i -so - | grep -iPo '(?<=<title>)(.*)(?=</title>)')" >> $PLISTFILE
#        curl $i -so - | grep -iPo "(?<=<title>)(.*)(?=</title>)" >> $PLISTFILE
        ((c++))
    done
    # else
    #     for i in $PLAYLIST; do
    #         echo "$c. $i" >> $PLISTFILE
    #     done
    # fi
    cat $PLISTFILE
}

#** - i3blocks @func
i3mpvstat(){
    VIDEOP=$(echo '{ "command": ["get_property", "video"] }' | socat - $SOC 2>/dev/null | jq .data)
    [[ "$VIDEOP" = "false" ]] && GLYPH= || GLYPH=
    [[ $(echo $ARTIST | awk '{print $1}' | grep -i "^the \|^a ") ]] \
        && ARTIST=$(echo $ARTIST | awk '{print $1 " " $2}') || ARTIST=$(echo $ARTIST | awk '{print $1}')
    [[ $(echo $TITLE | awk '{print $1}' | grep -i "^the \|^a ") ]] \
        && TITLE=$(echo $TITLE | awk '{print $1 " " $2}') || TITLE=$(echo $TITLE | awk '{print $1}')
    [[ -z $ARTIST ]] && ARTIST="" || ARTIST="$ARTIST: "
    [[ -z $POSITION ]] && exit
    [[ $PLAYPOS == $PLAYTOT ]] && LIST="" || LIST="$PLAYPOS/$PLAYTOT "
    # LIST="($PLAYPOS/$PLAYTOT) "
    if [[ "$STATUS" = "PLAY" ]]; then
        if (( $(($POSITION/3600)) < 1 )); then
            printf "<span fgcolor='$PLAY_COLOR' weight='$WEIGHT'> $GLYPH $LIST %02d:%02d </span>\n" \
                   $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING%3600/60)) $(($REMAINING%60))
        else
            printf "<span fgcolor='$PAUSE_COLOR'> $GLYPH $LIST$ARTIST $TITLE %02:%02d:%02d [-%02d:%02d] $GLYPH </span>\n" \
                   $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        fi
        # if (( $(($POSITION/3600)) < 1 )); then
        #     printf "<span bgcolor='$BGPLAY'> $GLYPH $LIST$ARTIST $TITLE %02d:%02d [-%02d:%02d] $GLYPH </span>\n" \
        #            $(($POSITION%3600/60)) $(($POSITION%60)) \
        #            $(($REMAINING%3600/60)) $(($REMAINING%60))
        # else
        #     printf "<span bgcolor='$BGPLAY'> $GLYPH $LIST$ARTIST $TITLE %02:%02d:%02d [-%02d:%02d] $GLYPH </span>\n" \
        #            $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
        #            $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        # fi
    elif [[ "$STATUS" = "PAUSE" ]]; then 
        if (( $(($POSITION/3600)) < 1 )); then
            printf "<span fgcolor='$PAUSE_COLOR' weight='normal'> $GLYPH $LIST %02d:%02d </span>\n" \
                   $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING%3600/60)) $(($REMAINING%60))
        else
            printf "<span fgcolor='$PLAY_COLOR'> $GLYPH $LIST$ARTIST $TITLE %02:%02d:%02d [-%02d:%02d] $GLYPH </span>\n" \
                   $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        fi
        # if (( $(($POSITION/3600)) < 1 )); then
        #     printf "<span bgcolor='$BGPAUSE'><span color='$FGPAUSE'> $GLYPH $LIST$ARTIST $TITLE %02d:%02d [-%02d:%02d] $GLYPH </span></span>\n" \
        #            $(($POSITION%3600/60)) $(($POSITION%60)) \
        #            $(($REMAINING%3600/60)) $(($REMAINING%60))
        # else
        #     printf "<span bgcolor='$BGPAUSE'><span color='$FGPAUSE'> $GLYPH $LIST$ARTIST $TITLE %02:%02d:%02d [-%02d:%02d] $GLYPH </span></span>\n" \
        #            $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
        #            $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        # fi
    fi
}

#** - full info @func
full(){
    [[ ! -S $SOC ]] && echo  "mpv-socket: $SOC does't exist" && exit 0
    [[ -z $POSITION ]] && echo "mpv-socket: no mpv instance is running" && exit
    printf "Mpv Socket Status:\n-----------------\n"
    printf 'Status:      %s\n' $STATUS
    [[ $SOURCE =~ "http" ]] && printf 'Source:      %s\n' "$SOURCE" || printf 'Source:      %s\n' "$FILENAME"
    [[ -z $ARTIST ]] || printf "Artist:      %s\n" "$ARTIST" 
    printf 'Title:       %s\n' "$TITLE"
    [[ -z $ALBUM ]] || printf "Album:       %s\n" "$ALBUM"
    [[ -z $GENRE ]] || printf 'Genre:       %s\n' "$GENRE"
    if (( $(($POSITION/3600)) < 1 )); then
        printf 'Position:    %02d:%02d\n' $(($POSITION%3600/60)) $(($POSITION%60)) 
        printf 'Remaining:   %02d:%02d\n' $(($REMAINING%3600/60)) $(($REMAINING%60))
    else
        printf '%02d:%02d:%02d\n' $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) 
        printf '%02d:%02d:%02d\n' $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
    fi
    [[ -z $TRACK ]] || printf "Track:       %s\n" $TRACK
    printf 'List:        %s/%s\n' $PLAYPOS $PLAYTOT
}

#** - usage @func
usage(){
    echo "Usage:    mpv-socket [-ipfP] [-l <url|path>] [-g <property>] 

Options:
 -f              print full stats
 -p              print current playlist
 -i              display message formatted for i3BLOCKS status message
 -s              return mpv status, i.e. PLAY or PAUSE
 -P              display playlist titles
 -l <url|path>   load file form URL/PATH to current playlist (use full path)
 -g <property>   get value of PROPERTY 
"
}

#** - main @func
main(){
    while getopts ':fpistPa:g:l:' flag; do
        case "${flag}" in
            a) mpv --input-ipc-server=$SOC -- "$OPTARG" &
               ;;
            i) i3mpvstat
               ;;
            # a) [[ $ALBUM ]] && echo $ALBUM
            #    ;;
            p) if [[ $POSITION ]]; then
                   echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq .data[].filename | sed 's/\"//g'
               else
                   echo "mpv-socket: no mpv instance is running"
               fi
               ;;
            f) full
               ;;
            s) [[ $POSITION ]] && echo $STATUS || echo 'NOT ACTIVE' 
               ;;
            t) [[ $TITLE ]] && echo $TITLE || echo $SOURCE
               ;;
            P) playlist
               ;;
            g) if [[ -z $OPTARG ]]; then
                   echo -e "mpv-socket: missing argument for -g flag\n"
                   usage
               else
                   echo "{ \"command\": [\"get_property\", \"$OPTARG\"] }" | socat - $SOC 2>/dev/null
               fi
               ;;
            l) echo "{ \"command\": [\"loadfile\", \"$OPTARG\", \"append-play\"] }" | socat - $SOC 2>/dev/null
               ;;
            \?) echo -e "Invalid flag \"-$OPTARG\"\n"; usage 
        esac
    done
    exit 0
}

[[ -z "$1" ]] && usage || main "${@}"

