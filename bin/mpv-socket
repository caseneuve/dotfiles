#!/bin/bash

# Path:        ~/scr/mpv-socket.sh (ln → dp)
# Created:     14.07.18, 09:12    @toshiba
# Last update: 18.07.18, 14:53:52 @x200

## Doc:
# FIXME: playlist -P działa tylko dla url
# TODO: check if file is a socket → [[ -S file ]]
# TODO: -p (playlist) → show real number, track title (not filename), and * for currenlty playing, status (play/pause)
# DONE: i3bloki nie resetują się po komendzie "stop"
# DONE: zamienić preambułę na funkcje, żeby program nie wychodził bez podania usage (gdy nic nie gra)
# DONE: -t title → jak podzielić tytuły, żeby wyświetlały się w osobnych liniach?

SOC=/tmp/mpv
POSITION=`echo '{ "command": ["get_property_string", "time-pos"] }' | socat - $SOC 2>/dev/null | jq .data | xargs | cut -d'.' -f 1`
REMAINING=`echo '{ "command": ["get_property_string", "time-remaining"] }' | socat - $SOC 2>/dev/null | jq .data | xargs | cut -d'.' -f 1`
PLAYPOS=`echo '{ "command": ["get_property_string", "playlist-pos"] }' | socat - $SOC 2>/dev/null | jq .data | xargs`
[[ $PLAYPOS ]] && PLAYPOS=$(( $PLAYPOS + 1 ))
PLAYTOT=`echo '{ "command": ["get_property_string", "playlist-count"] }' | socat - $SOC 2>/dev/null | jq .data | xargs`
METADATA=`echo '{ "command": ["get_property", "filtered-metadata"] }' | socat - $SOC 2>/dev/null`
[[ "$(echo $METADATA | jq .data)" = "{}" ]] && METADATA=""

# colors
BGPLAY="#36648b"
BGPAUSE="#00001f26"
FGPAUSE="#6F7D91"
#FGPAUSE=$BGPLAY

if [[ $METADATA ]]; then
    ARTIST=`echo $METADATA | jq .data.Artist | xargs`
    TITLE=`echo $METADATA | jq .data.Title | xargs`
    ALBUM=`echo $METADATA | jq .data.Album | xargs`
    GENRE=`echo $METADATA | jq .data.Genre | xargs`
    TRACK=`echo $METADATA | jq .data.Track | xargs`
fi

PLAYLIST=`echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq .data[].filename`
SOURCE=`echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq '.data[] | select (.| has("current")) | .filename' | xargs`

[[ $SOURCE =~ "http" ]] && TITLE=`echo $(curl $SOURCE -so - | grep -iPo '(?<=<title>)(.*)(?=</title>)')` || FILENAME=`echo '{ "command": ["get_property", "filename" ] }' | socat - $SOC 2>/dev/null | jq .data | xargs`

STATUS=`echo '{ "command": ["get_property", "pause"] }' | socat - $SOC 2>/dev/null | jq .data`
[[ "$STATUS" = "false" ]] && STATUS="PLAY" || STATUS="PAUSE"

playlist(){
    [[ $POSITION ]] || echo "mpv-socket: no active playlist"; exit
    PLISTFILE=/tmp/mpv-playlist
    rm $PLISTFILE
    c=1
    if [[ $SOURCE =~ "http" ]]; then
        for i in $PLAYLIST; do
            echo "$c. $(curl $i -so - | grep -iPo '(?<=<title>)(.*)(?=</title>)')" >> $PLISTFILE
            ((c++))
        done
    else
        for i in $PLAYLIST; do
            echo "$c. $i" >> $PLISTFILE
        done
    fi
    cat $PLISTFILE
}

# i3blocks function
i3mpvstat(){
    TITLE_LEN=`echo "${#TITLE}"`
    MAX=25
    if (( $TITLE_LEN > $MAX )); then
        let x=$TITLE_LEN-$MAX
        TITLE=`echo ${TITLE::-$x}…`;
    fi
    [[ -z $POSITION ]] && exit
    [[ -z $ARTIST ]] && ARTIST="" || ARTIST="$ARTIST: "
    LIST="[$PLAYPOS/$PLAYTOT] "
    if [[ "$STATUS" = "PLAY" ]]; then
        if (( $(($POSITION/3600)) < 1 )); then
            printf "<span bgcolor='$BGPLAY'> ♫ $ARTIST$TITLE %02d:%02d [-%02d:%02d]$LIST♫ </span>\n" \
                   $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING%3600/60)) $(($REMAINING%60))
        else
            printf "<span bgcolor='$BGPLAY'> ♫ $ARTIST$TITLE %02:%02d:%02d [-%02d:%02d]$LIST♫ </span>\n" \
                   $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        fi
    elif [[ "$STATUS" = "PAUSE" ]]; then 
        if (( $(($POSITION/3600)) < 1 )); then
            printf "<span bgcolor='$BGPAUSE'><span color='$FGPAUSE'> ♫ $ARTIST$TITLE %02d:%02d [-%02d:%02d]$LIST♫ </span></span>\n" \
                   $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING%3600/60)) $(($REMAINING%60))
        else
            printf "<span bgcolor='$BGPAUSE'><span color='$FGPAUSE'> ♫ $ARTIST$TITLE %02:%02d:%02d [-%02d:%02d]$LIST♫ </span></span>\n" \
                   $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) \
                   $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
        fi
    fi
}

# full info function 
full(){
    [[ ! -S $SOC ]] && echo  "mpv-socket: $SOC does't exist" && exit 0
    [[ -z $POSITION ]] && echo "mpv-socket: no mpv instance is running" && exit
    printf "Mpv Socket Status:\n-----------------\n"
    printf 'Status:      %s\n' $STATUS
    [[ $SOURCE =~ "http" ]] && printf 'Source:      %s\n' "$SOURCE" || printf 'Source:      %s\n' "$FILENAME"
    [[ -z $ARTIST ]] || printf "Artist:      %s\n" "$ARTIST" 
    printf 'Title:       %s\n' "$TITLE"
    [[ -z $ALBUM ]] || printf "Album:       %s\n" "$ALBUM"
    [[ -z $GENRE ]] || printf 'Genre:       %s\n' "$GENRE"
    if (( $(($POSITION/3600)) < 1 )); then
        printf 'Position:    %02d:%02d\n' $(($POSITION%3600/60)) $(($POSITION%60)) 
        printf 'Remaining:   %02d:%02d\n' $(($REMAINING%3600/60)) $(($REMAINING%60))
    else
        printf '%02d:%02d:%02d\n' $(($POSITION/3600)) $(($POSITION%3600/60)) $(($POSITION%60)) 
        printf '%02d:%02d:%02d\n' $(($REMAINING/3600)) $(($REMAINING%3600/60)) $(($REMAINING%60))
    fi
    [[ -z $TRACK ]] || printf "Track:       %s\n" $TRACK
    printf 'List:        %s/%s\n' $PLAYPOS $PLAYTOT
}

# usage info function
usage(){
    echo "Usage:    mpv-socket [-ipfP] [-l <url|path>] [-g <property>] 

Options:
 -f              print full stats
 -p              print current playlist
 -i              display message formatted for i3BLOCKS status message
 -s              return mpv status, i.e. PLAY or PAUSE
 -P              display playlist titles
 -l <url|path>   load file form URL/PATH to current playlist (use full path)
 -g <property>   get value of PROPERTY 
"
}

# BOSS
main(){
    while getopts ':fpistPa:g:l:' flag; do
        case "${flag}" in
            a) mpv --input-ipc-server=$SOC -- "$OPTARG" &
               ;;
            i) i3mpvstat
               ;;
            # a) [[ $ALBUM ]] && echo $ALBUM
            #    ;;
            p) if [[ $POSITION ]]; then
                   echo '{ "command": ["get_property", "playlist"] }' | socat - $SOC 2>/dev/null | jq .data[].filename | sed 's/\"//g'
               else
                   echo "mpv-socket: no mpv instance is running"
               fi
               ;;
            f) full
               ;;
            s) [[ $POSITION ]] && echo $STATUS || echo 'NOT ACTIVE'
               ;;
            t) [[ $TITLE ]] && echo $TITLE || echo $SOURCE
               ;;
            P) playlist
               ;;
            g) if [[ -z $OPTARG ]]; then
                   echo -e "mpv-socket: missing argument for -g flag\n"
                   usage
               else
                   echo "{ \"command\": [\"get_property\", \"$OPTARG\"] }" | socat - $SOC 2>/dev/null
               fi
               ;;
            l) echo "{ \"command\": [\"loadfile\", \"$OPTARG\", \"append-play\"] }" | socat - $SOC 2>/dev/null
               ;;
            \?) echo -e "Invalid flag \"-$OPTARG\"\n"; usage 
        esac
    done
    exit 0
}

[[ -z "$1" ]] && usage || main "${@}"

