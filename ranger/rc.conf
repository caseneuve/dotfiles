######################################################################
###                                                                ###
###   _|  _|_|    _|_|_|  _|_|_|      _|_|_|    _|_|    _|  _|_|   ###    
###   _|_|      _|    _|  _|    _|  _|    _|  _|_|_|_|  _|_|       ###
###   _|        _|    _|  _|    _|  _|    _|  _|        _|         ###
###   _|          _|_|_|  _|    _|    _|_|_|    _|_|_|  _|         ###
###                                       _|                       ###
###                                   _|_|                         ###
######################################################################

# Last update: 10.09.18, 12:43:55 @x200
# note: all commands are copied to commands.py

## >> { GENERAL OPTIONS }
# Ask for a confirmation when running the "delete" command?
# values: "always", "never", "multiple" (default)
set confirm_on_delete multiple
# Which script is used to generate file previews?
set preview_script ~/.config/ranger/scope.sh
# Use the external preview script or display simple plain text or image previews?
set use_preview_script true
# Automatically count files in the directory, even before entering them?
set automatically_count_files true

## >> { EXTERNAL BEHAVIOUR }
# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
# note: czy to działa?
set open_all_images true

## >> { VERSION CONTROL }
# Be aware of version control systems and display information. note: zmieniłem na true
set vcs_aware true
# State of the three backends git, hg, bzr. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled

## >> { PREVIEW IMAGES }
set preview_images true
set preview_images_method w3m
# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false
# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true
# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to disable this feature.
set preview_max_size 0
set preview_files true
set preview_directories true
set collapse_preview true

## >> { APPEARANCE }
set column_ratios 1,3,6
# hidden files regex
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$
# don't Show hidden files by default (toggle this by typing 'zh')
set show_hidden false
set colorscheme default
set status_bar_on_top false
set draw_progress_bar_in_status_bar true
set draw_borders true
set dirname_in_tabs true
set display_size_in_main_column true
set display_size_in_status_bar true
set display_tags_in_all_columns true
# Set a title for the window?
set update_title false
set update_tmux_title true
# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3
# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true
# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8
# Turning this on makes sense for screen readers:
set show_cursor false
# Flush the input after each key hit?  (Noticable when ranger lags)
set flushinput false
# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true
# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

## >> {{ SORTING (appearance) }}
# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural
# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

## >> { LOCAL OPTIONS }
# You can set local options that only affect a single directory.
# Examples:
# setlocal path=~/downloads sort mtime
setlocal path=~/pdf                        sort mtime
setlocal path=~/dwl                        sort mtime
setlocal path=~/obr                        sort mtime
setlocal path=~/biu                        sort mtype
setlocal path=~/box/Dropbox/.Config/Mupdf  sort mtime
setlocal path=~/dwl/att                    sort mtime
setlocal path=~/wid/cast                   sort mtime

## >> { CONSOLE }
# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50
set save_console_history true
# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000


## >> { MOUSE BEHAVIOUR }
set mouse_enabled true
# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

## >> { BOOKMARKS }
# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks false
# Whether to include bookmarks in cd command
set cd_bookmarks true


## >> { METADATA } note: ?
# When the metadata manager module looks for metadata, should it only look for a ".metadata.json" file in the current directory, or do a deep search and check all directories above the current one as well?
set metadata_deep_search false

#  >> { KEY BINDINGS }
#  >> {{ KBD BROWSER }}
#  >> {{{ GENERAL @kbd}}}
map     q quit
map     Q quitall

map R     reload_cwd
#map <C-r> reset
map <c-r> chain reset; eval fm.source(fm.confpath('rc.conf'))
#map <C-l> redraw_window
# note: czy reset?
map <C-g> abort
map <esc> change_mode normal

# map i display_file note: → f3
# wcześniej F = freeze_files (ale jest wyłączone i nie wiem co to robi)
map F display_file 
map ? help
map W display_log
map w taskview_open
map S shell $SHELL

#  >> {{{ BROWSER CONSOLE ACTIONS @kbd }}}
map :  console
# to trzeba przemapować!
#map ;  console
map !  console shell%space
map @  console -p6 shell %%s
map #  console shell -p%space
# map s  console shell%space
# pokaż możliwe programy → chain r
#map r  chain draw_possible_programs; console open_with%space
# find and open:
map f  console find%space
map cd console cd%space
# note: działa → niżej jest jeszcze F7
#map +m console mkdir%space
map +d console mkdir%space
map +f console touch%space
map ;f console flat%space
map ;F chain console flat 0; eval fm.ui.console.execute()
map ;r reset
map ;d console mkdir%space
map ;t console touch%space
map ;m shell ~/.dotfiles/bin/mount.sh
map ;u shell ~/.dotfiles/bin/unmount.sh

#  >> {{{ DISPLAY INFO }}}
# Change the line mode → appearance (jak wyświetlają się pliki)
map Mf linemode filename
map Mi linemode fileinfo
map Mp linemode permissions
map Mt linemode metatitle
map Ms linemode sizemtime
map Mm linemode mtime

#  >> {{{ TAGGING / MARKING }}}
# note: DO CZEGO TO SŁUŻY??? → wyłączam
map T       tag_toggle
# map ut      tag_remove
# map <any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
# note: dobre!
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
# note: visual mode = ruch kursora zaznacza pliki
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

#  >> {{{ FUNCTION KEYS @ kbd }}}
# todo: eFy trzeba uwolnić
# map <F1> help
# note: display file = pokaż plik na całym oknie → super, można przewijać
# map <F3> display_file
# map <F4> edit
# map <F5> copy
# map <F6> cut
# map <F7> console mkdir%space
# map <F8> console delete
# map <F10> exit

#  >> {{{ MOVEMENT @kbd }}}
# copymap <UP>       i
# copymap <DOWN>     k
# copymap <LEFT>     j
# copymap <RIGHT>    l
# copymap <HOME>     <a-i>
# copymap <END>      <a-k>
# copymap <PAGEDOWN> <C-v>
# copymap <PAGEUP>   <a-v>

map k move up=1
map j move down=1
map h move left=1
map l move right=1
copymap l <enter>

map K move to=0
map J move to=-1

# map K  move down=0.5  pages=True
# map I  move up=0.5    pages=True
map <a-o> move down=5
map <a-u> move up=5
# copymap J <C-D>
# copymap K <C-U>

#  >> {{{ JUMPING AROUND }}}
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

#  >> {{{ EXTERNAL PROGRAMS → edit }}}
map E  edit_file
copymap E <C-e>

map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh

#  >> {{{ FILESYSTEM OPERATIONS }}}
# change mod (chmod)
map = console chmod%space
# renaming
map rr console rename%space
map ra rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.basename)
map rb  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)
map B  chain console bulkrename; eval fm.ui.console.execute()

#  >> {{{ COPY PASTE (yanking) }}}
map pp paste
map po paste overwrite=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dD console delete
map <C-d> chain console delete; eval fm.ui.console.execute()

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove

#  >> {{{ SEARCHING }}}
map /  console search%space
map n  search_next
map N  search_next forward=False
map \  console scout -gite%space

unmap ct 
unmap cs 
unmap ci 
unmap cc 
unmap cm 
unmap ca 

#  >> {{{ TABS }}}
map <C-t>     tab_new ~
map <C-w>     tab_close
map <TAB>     tab_move 1
map <C-TAB>   tab_move -1
map <A-l>     tab_move 1
map <A-j>     tab_move -1
# map <A-Right> tab_move 1
# map <A-Left>  tab_move -1
# map gt        tab_move 1
# map gT        tab_move -1
# map gn        tab_new ~
# map gc        tab_close
unmap gt        tab_move 1
unmap gT        tab_move -1
unmap gn        tab_new ~
unmap gc        tab_close

map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# FAST TABS
map tp tab_new ~/pdf
map to tab_new ~/obr
map tO tab_new ~/org
map tr tab_new ~/org
map t@ tab_new ~/org/pro/www-akwinata
map tw tab_new ~/wid
map taa tab_new ~/dwl
map tat tab_new ~/dwl/att
map tdc tab_new ~/box/Dropbox/.Config
map tds tab_new ~/box/Dropbox/Szkoła
#map tsp tab_new ~/Dropbox/EMACS/szkoła/sprawdziany
map tm tab_new ~/muz
map tt tab_new ~/.dotfiles
#map txc tab_new ~/Dropbox/config
map txx tab_new ~/box/Dropbox
#map txs tab_new ~/Dropbox/!szkoła
map tb tab_new ~/bin

#  >> {{{ SORTING }}}
map or toggle_option sort_reverse
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

# map dc get_cumulative_size

#  >> {{{ TOGGLE OPTIONS z-bindings }}}
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zh    toggle_option show_hidden
map <C-h> toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zf    console filter%space
map zF    chain console scout -gpt *; eval fm.ui.console.execute() 

#  >> {{{ BOOKMARKS }}}
map `<any>  enter_bookmark %any
map '<any>  set_bookmark %any
# map m<any>  set_bookmark %any
map um<any> unset_bookmark %any
# map m<bg>   draw_bookmarks
# copymap m<bg>  um<bg> `<bg> '<bg>

#  >> {{ KBD CONSOLE }}
# Note: Unmapped keys are passed directly to the console.
#  >> {{{ BASIC (console) }}}
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
# note: co to znaczy?
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <ESC> <C-g>
copycmap <CR>  <C-j>

#  >> {{{ MOVE AROUND (console) }}}
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

#  >> {{{ LINE EDITING (console) }}}
cmap <delete>     eval fm.ui.console.delete(0)
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

#  >> {{{ EMACS BINDINGS for console }}}
copycmap <up>        <C-p> <a-i>
copycmap <down>      <C-n> <a-k>
copycmap <left>      <C-b> <a-j>
copycmap <right>     <C-f> <a-l>
copycmap <home>      <C-a> <a-h>
copycmap <end>       <C-e> <a-;>
copycmap <delete>    <C-d> <a-e>
copycmap <backspace> <C-h> <a-r>

# Note: There are multiple ways to express backspaces. <backspace> (code 263) and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

#  >> {{ PAGER KEYBINDINGS }}
#  >> {{{ MOVEMENT (pager) }}}
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
# już wyżej przemapowałem
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     <a-i> g
copypmap <END>      <a-k> G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>

#  >> {{{ BASIC (pager) }}}
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q <F3>
pmap     E     edit_file

#  >> {{ TASKVIEW KEYBINDINGS }}
#  >> {{{ MOVEMENT (taskview) }}}
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       i  <C-p>
copytmap <DOWN>     k  <C-n> <CR>
copytmap <HOME>     <a-i> g
copytmap <END>      <a-k> G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

#  >> {{{ CHANGING PRIORITY AND DELETING TASKS (taskview) @kbd }}}
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

#  >> {{{ BASIC (taskview) }}}
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>

#  >> {{ FAST DIRS }}
# note: do not edit this secion manually (it's set up by fast dirs script)
# ----------------------------------------------------------------------
# fast dirs start

map gh cd /home/piotr
map ga cd /home/piotr/dwl
map gaa cd /home/piotr/dwl
map gag cd /home/piotr/dwl/att
map go cd /home/piotr/obr
map gob cd /home/piotr/obr
map goo cd /home/piotr/org
map gol cd /home/piotr/org/log
map gog cd /home/piotr/org/gtd
map gss cd /home/piotr/scr
map gw cd /home/piotr/wid
map gm cd /home/piotr/muz
map gp cd /home/piotr/pdf
map gB cd /home/piotr/biu
map gb cd /home/piotr/bin
map gbi cd /home/piotr/bin
map gS cd /home/piotr/szk
map gsz cd /home/piotr/szk/18-19
map gy cd /home/piotr/dox
map gc cd /home/piotr/.config
map gC cd /home/piotr/.config
map gcr cd /home/piotr/.config/ranger
map gct cd /home/piotr/.config/termite
map gcx cd /home/piotr/.config/xfce4
map gcb cd /home/piotr/.bak
map gcq cd /home/piotr/.config/qutebrowser
map gcn cd /home/piotr/.newsboat
map gcm cd /home/piotr/.mutt
map ggs cd /home/piotr/git/hub/st
map gd cd /home/piotr/.dotfiles
map gdd cd /home/piotr/.dotfiles
map gdb cd /home/piotr/.dotfiles/bin
map gdi cd /home/piotr/.dotfiles/i3
map gdr cd /home/piotr/.dotfiles/ranger
map gdc cd /home/piotr/.dotfiles/calcurse
map gdq cd /home/piotr/.dotfiles/qtbro
map gdo cd /home/piotr/dox
map gx cd /home/piotr/box/Dropbox
map gxx cd /home/piotr/box/Dropbox
map gxc cd /home/piotr/box/Dropbox/.Config
map gxs cd /home/piotr/box/Dropbox/Szkoła
map gD cd /home/piotr/box/Dropbox/Dokumenty
map geg cd /home/piotr/.emacs.git
map ged cd /home/piotr/.emacs.d
map gM cd /media
map gr cd /
map gR cd /root
map gg cd /home/piotr/git
map ggl cd /home/piotr/git/lab
map ggp cd /home/piotr/git/lab/py-exercises
map ggh cd /home/piotr/git/hub

# fast dirs end
# -----------------------------------------------------------------

map gll cd /home/piotr/pcloud
map sm shell ~/.dotfiles/bin/sendmail.sh %s
map sq shell ~/.dotfiles/bin/sendmailquick.sh %s

#  >> {{ FAST OPS }}
# moving and copying to frequently used directories
unmap m

map cp shell cp %s ~/pdf
map mp shell mv %s ~/pdf

map co shell cp %s ~/Obrazy
map mo shell mv %s ~/Obrazy

map cw shell cp %s ~/Wideo
map mw shell mv %s ~/Wideo

map cm shell cp %s ~/Muzyka
map mm shell mv %s ~/Muzyka

#  >> {{ CUSTOM COMMANDS }}
# use fzf to find file in this directory
map <c-f> fzf_select
# use fzf to locate any file
map <c-l> fzf_locate

#  >> {{ SCRIPTS }}
# send mail
map smm shell ~/.dotfiles/bin/sendmail.sh %s
map smq shell ~/.dotfiles/bin/sendmailquick.sh %s
# wall paper > save
map sw shell ~/.dotfiles/bin/wall.sh %s
map sW shell ~/.dotfiles/bin/wallc.sh %s
# wall paper > dont save
map sfc shell feh --bg-center --no-fehbg %s
map sff shell feh --bg-fill --no-fehbg %s
map sfm shell feh --bg-max --no-fehbg %s
# pdf ops:
map spt console shell ~/.dotfiles/bin/tnijpdf.sh "%s"%space
map spx shell pdftotext '%s'
map spr shell ~/.dotfiles/bin/mupdf-restore.sh %s
map sps shell ~/.dotfiles/bin/mupdf-cache.sh
map spR shell ~/.dotfiles/bin/mupdf-restore-session.sh
# mocp (enqueue, append to playlist)
map sMq shell mocp -q %s
map sMa shell mocp -a %s
# tag music files
map stt shell ~/.dotfiles/bin/taffy-helper.sh %s
map stT shell ~/.dotfiles/bin/taffy-multifile.sh 
# docx, odt, etc
map sd shell docx2txt %s
map so shell odt2txt %s > %s.txt

# >> {{ ALIASY }}
alias search scout -gst
alias filter scout -gpts
