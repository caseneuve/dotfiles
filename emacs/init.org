#+title: EMACS CONFIG 
#+date: 25.08.2017
#+startup: hideblocks
#+todo: check (x) | ok (o) 
#+todo: cleanup (c) | nice (g) 

* COMMENT LOG
** 16/12/2017 zmieniam `font-lock-constant-face' 
było:
- foreground: #008b8b
jest:
- foreground: DeepPink2
** stare
- 05/09/2017 zmieniłem lokalizację abbrev_defs i yas snippets na Dpx 
- 2017-08-30 dodałem org custom speed commands
- 2017-08-29 spr czy właściwie działa mouse avoidance mode na tablecie
- 2017-08-26 TODO przerzucić wszystkie funkcje do jednego pliku, który będzie się loadował (?)
- 2017-08-25 a może zmienić load path na jakiś folder @dropbox? żeby był dostęp ze wszystkich urządzeń  
- 2017-08-25 dodaję header line setup (load) + usuwam header line = mode line
- 2017-08-22 transparency: wyłączam 2 pierwsze linijki, żeby nie załączała się przejrzystość z defoltu
- 2017-08-22 zadania [0/10]
  - [ ] ustawić przez custom `org-agenda-tags-column'
  - [ ] pooprawić zmienne, żeby nie było niepotrzebnych pięter
  - [ ] wyrzucić śmiecie
  - [ ] co z agenda diary file? (aktualnie = log2017)
  - [ ] hidden mode line >> spr kbd (czy potrzebne jest C-c m?)
  - [ ] spr co to za zmienna `make-pointer-invisible' (>interface>>ogólne)
  - [ ] spr =indent-tabs-mode nil=
  - [ ] zmienić w lenovo @.emacs na (blink-cursor-mode 0) !!
  - [ ] zmienić nazwę pliku na myinit.org i zmienić path (spr czy nie będzie konfliktów)
  - [ ] spr na lenovo czy działa frame >> default directory (na tablecie jest niedynamiczne)
* COMMENT POCZEKALNIA
** lispy
[[https://github.com/abo-abo/lispy][github]] 
[[ http://oremacs.com/lispy/][ore emacs]]
** ispell intelligent check
# ispell ignoruje składnię org mode:
(eval-after-load 'ispell
  '(progn
     (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
     (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
     ))
* CUSTOM, BACKUP
** nice set custom file
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src 

** nice backups
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions nil)
;; (setq version-control t)
;; (setq vc-make-backup-files t)

(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; dired deletion
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      delete-by-moving-to-trash t
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )
#+end_src

* FUNKCJE                                             :funkcje:config:
** ARCHIVE
*** [off] find init file
# wyłączam, bo zastąpiłem registrami
;#+begin_src emacs-lisp
(defun find-lenovo-config-file ()
  "otwiera init w nowym oknie."
  (interactive)
  (find-file lenovo-config-file)
)
;;(global-set-key (kbd "h-i") 'find-tablet-config-file)
#+end_src

*** [off] xah delete current txt block
;#+begin_src emacs-lisp
(defun xah-delete-current-text-block ()
  "Delete the current text block or selection, and copy to `kill-ring'.
A “block” is text between blank lines.
URL `http://ergoemacs.org/emacs/emacs_delete_block.html'
Version 2017-07-09"
  (interactive)
  (let (-p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning) -p2 (region-end))
      (progn
        (if (re-search-backward "\n[ \t]*\n+" nil "move")
            (progn (re-search-forward "\n[ \t]*\n+")
                   (setq -p1 (point)))
          (setq -p1 (point)))
        (re-search-forward "\n[ \t]*\n" nil "move")
        (setq -p2 (point))))
    (kill-region -p1 -p2)))
#+end_src

** [emacswiki] toggle window split
#+begin_src emacs-lisp
  (defun toggle-window-split ()
    "https://www.emacswiki.org/emacs/ToggleWindowSplit"
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  ;(define-key ctl-x-4-map "t" 'toggle-window-split)
  (global-set-key (kbd "M-|") 'toggle-window-split)
#+end_src

** kill-region (C-w zabija linię, jeśli nie zaznaczono regionu nie zaznaczono regionu)
#+begin_src emacs-lisp
(defadvice kill-region (before slick-cut activate compile)
    "when called interactively with no active region, kill a single line instead: https://www.youtube.com/watch?v=lndg0q91vuy"
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
	     (line-beginning-position 2)))))
#+end_src

** execute src block while loading file
#+begin_src emacs-lisp
(defun my/execute-startup-block ()
    "Działa razem z local variables;
składnia #eval: (nazwa-tej-funkcji) + przed src_blc, który ma być ewaluowany #+name: startup;
za: https://lists.gnu.org/archive/html/emacs-orgmode/2016-07/msg00394.html"
    (interactive)
    (org-babel-goto-named-src-block "startup")
    (org-babel-execute-src-block))
#+end_src

** pk/wstaw org heder
#+begin_src emacs-lisp
(defun pk-org-insert-heading-2 ()
  "Wstawia w `org-mode' nagłówek poziomu drugiego"
  (interactive)
  (beginning-of-line)
  (insert "** ")
  (end-of-line))

(defun pk-org-insert-heading-3 ()
  "Wstawia w `org-mode' nagłówek poziomu drugiego"
  (interactive)
  (beginning-of-line)
  (insert "*** ")
  (end-of-line))

(defun pk-org-insert-heading-4 ()
  "Wstawia w `org-mode' nagłówek poziomu drugiego"
  (interactive)
  (beginning-of-line)
  (insert "**** ")
  (end-of-line))

(defun pk-org-insert-heading-5 ()
  "Wstawia w `org-mode' nagłówek poziomu drugiego"
  (interactive)
  (beginning-of-line)
  (insert "***** ")
  (end-of-line))

(defun pk-org-insert-heading-6 ()
  "Wstawia w `org-mode' nagłówek poziomu drugiego"
  (interactive)
  (beginning-of-line)
  (insert "***** ")
  (end-of-line))
#+END_SRC

** pk/copy-line-or-region: kopiuj całą linię, jeśli nie ma aktywnego regionu
#+begin_src emacs-lisp
(defun pk/copy-line-or-region ()
  "Jeśli region nie jest zaznaczony, kopiuj cały wiersz; w innym wypadku kopiuj region"
  (interactive)
  (if (use-region-p)
      (kill-ring-save (region-beginning) (region-end))
    (save-excursion
      (let (beg end)
        (beginning-of-line)
        (setq beg (point))
        (set-mark beg)
        (end-of-line)
        (setq end (point))
        (kill-ring-save beg end)
        (message "Linia %d skopiowana!" (line-number-at-pos))))))
#+end_src

** pk/switch-and-split: dzieli okno i przechodzi do niego
#+begin_src emacs-lisp
(defun pk/split-and-switch-r ()
  "Podziel okno pionowo, przejdź do drugiego okna (jeśli więcej okien aktywnych - wybierz, do którego okna; wymaga `switch-window')"
  (interactive)
  (split-window-right)
  (switch-window))

(defun pk/split-and-switch-b ()
  "Podziel okno poziomo, przejdź do drugiego okna (jeśli więcej okien aktywnych - wybierz, do którego okna; wymaga `switch-window')"
  (interactive)
  (split-window-below)
  (switch-window))

#+end_src

** pk/diary-template (@org-capture)
#+begin_src emacs-lisp
  (defun pk/diary-template ()
    "wstawia wpisy z org-capture w formacie `* dzień\\** tytuł wpisu'"
    (interactive)
    (let ((data (format-time-string "%d-%m-%Y" ))) ;można dodać na początku %A albo %a, żeby mieć odpowiednio nazwę dnia lub skrót, ale nie działa ze względu na porypany encoding :/ (środa wyświetla się w formacie \234roda)
      (progn
        (goto-char (point-min))
        (if (eq (re-search-forward data nil t) nil)
          (progn
            (end-of-buffer)
            (insert "\n* " data "\n**")
            )
          (newline 1)))))
#+end_src

** pio/insert-date
#+begin_src emacs-lisp
(defun pio/insert-date ()
  "Wstaw bieżącą datę tam, gdzie kursor"
  (interactive)
  (insert (format-time-string "%d/%m/%Y")))

(global-set-key (kbd "H-t") 'pio/insert-date)
#+end_src

** pk/e-dziennik
#+begin_src emacs-lisp
  (defun pk/e-dziennik ()
    "Otwiera stronę logowania e-dziennika w przeglądarce"
    (interactive)
    (browse-url "https://cufs.vulcan.net.pl/powiatotwocki/Account/LogOn?ReturnUrl=%2Fpowiatotwocki%2FFS%2FLS%3Fwa%3Dwsignin1.0%26wtrealm%3Dhttps%253a%252f%252fuonetplus-dziennik.vulcan.net.pl%252fpowiatotwocki%252f027267%252fLoginEndpoint.aspx%26wctx%3Dhttps%253a%252f%252fuonetplus-dziennik.vulcan.net.pl%252fpowiatotwocki%252f027267%252fLoginEndpoint.aspx"))
#+end_src

** startup message = init time
#+begin_src emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Emacs init time: %s" (emacs-init-time)))
#+end_src

** pk/system-type-p
#+begin_src emacs-lisp
(defun pk/system-linux-p ()
  "T jeśli system-type = gnu/linux, w innym wypadku nil."
  (interactive)
  (if (string= system-type "gnu/linux")
        (eq t t)
    (eq t nil)))

(defun pk/system-win-p ()
  "T jeśli system-type = windows-nt, w innym wypadku nil."
  (interactive)
  (if (string= system-type "windows-nt")
      (eq t t)
    (eq t nil)))
#+end_src

** check pk/log-template
#+begin_src emacs-lisp
    ;; FIXME: czasem wpisy wklejają się jako header 1 i wszystko się psuje
    ;; NOTE: dodałem `org-outline-regexp-bol', żeby ominąć :PROPERTIES:

  (defun pk/log-template ()
    "Wstawiaj wpisy do nagłówków według aktualnego miesiąca, w formacie [dzień/miesiąc, godzina] heder"
    (interactive)
    (progn
      (beginning-of-buffer)
      (let ((rok '("STYCZEŃ" "LUTY" "MARZEC" "KWIECIEŃ" "MAJ" "CZERWIEC" "LIPIEC" "SIERPIEŃ" "WRZESIEŃ" "PAŹDZIERNIK" "LISTOPAD" "GRUDZIEŃ"))
            (m (string-to-int (format-time-string "%m"))))
        (if (eq (re-search-forward (concat "* " (nth (- m 1) rok) " " (format-time-string "%Y")) nil t) nil)
            (progn
              (end-of-buffer)
              (insert "\n* " (nth (- m 1) rok) " " (format-time-string "%Y") "\n:PROPERTIES:\n:visibility: children\n:END:\n**"))
          (progn
            (re-search-forward org-outline-regexp-bol)
            (beginning-of-line)
            (insert "\n")
            (previous-line))))))

  ;; stara funkcja (bez wstawiania dat rocznych)
      ;; (defun pk/log-template ()
      ;;   "Wstawiaj wpisy do nagłówków według aktualnego miesiąca, w formacie [dzień/miesiąc, godzina] heder"
      ;;   (interactive)
      ;;   (progn
      ;;     (beginning-of-buffer)
      ;;     (let ((rok '("STYCZEŃ" "LUTY" "MARZEC" "KWIECIEŃ" "MAJ" "CZERWIEC" "LIPIEC" "SIERPIEŃ" "WRZESIEŃ" "PAŹDZIERNIK" "LISTOPAD" "GRUDZIEŃ"))
      ;;           (m (string-to-int (format-time-string "%m"))))
      ;;       (if (eq (re-search-forward (concat "* " (nth (- m 1) rok)) nil t) nil)
      ;;           (progn
      ;;             (end-of-buffer)
      ;;             (insert "\n* " (nth (- m 1) rok) "\n:PROPERTIES:\n:visibility: children\n:END:\n**"))
      ;;         (progn
      ;;           (re-search-forward org-outline-regexp-bol)
      ;;           (beginning-of-line)
      ;;           (insert "\n")
      ;;           (previous-line))))))
#+end_src

** org-begin-template
#+begin_src emacs-lisp :results silent
(defun org-begin-template ()
  "Otocz zaznaczony region jako src_block.
url: http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/"
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "src")
                      ("e" . "example")
                      ("q" . "quote")
                      ("v" . "verse")
                      ("c" . "center")
                      ("l" . "latex")
                      ("h" . "html")
                      ("a" . "ascii")
                      ))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Rodzaj bloku: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+end_" choice "\n")
                (goto-char start)
                (insert "#+begin_" choice "\n")))
             (t
              (insert "#+begin_" choice "\n")
              (save-excursion
                (next-line)
                (insert "#+end_" choice))))))))))

;;bind to key
(define-key org-mode-map (kbd "M-SPC <") 'org-begin-template)
#+end_src

** pk/end-of-line-no-tags
#+begin_src emacs-lisp :results silent
  (defun pk/end-of-line-no-tags ()
    "Jeśli kursor znajduje się na org-header, zamiast iść na koniec linii, idź na koniec tekstu headera (ignoruj tagi), w innym wypadku idź na koniec linii."
    (interactive)
    (if (and (string= major-mode "org-mode") (org-at-heading-p))
        (let ((h (org-heading-components)))
          (beginning-of-line)
          (forward-char (nth 0 h))
          (if (eq (nth 2 h) nil)
              (forward-char (+ 1 (length (nth 4 h))))
            (forward-char (+ 2 (length (nth 2 h)) (length (nth 4 h)))))
            )
      (end-of-line)))
#+end_src

** pk/extract-lesson [yas:lekcja]
#+begin_src emacs-lisp
  (defun pk/extract-lesson-subject-from-heading ()
    ;;(interactive)
    (insert 
      (mapconcat 'identity (split-string (nth 4 (org-heading-components)) "[0-9]") "")))

  (defun pk/extract-lesson-number-from-heading ()
    ;;(interactive)
    (insert (car (split-string (nth 4 (org-heading-components))))))
#+end_src

** pk/kill-line-dwim
#+begin_src emacs-lisp
  (defun pk/kill-line-dwim ()
    "Zabij całą linię z każdego punktu"
    (interactive)
    (beginning-of-line)
    (kill-line))

  (global-unset-key (kbd "C-,"))
  (global-set-key (kbd "C-,") 'pk/kill-line-dwim)
  (global-set-key (kbd "C-.") 'pk/kill-line-dwim)
#+end_src

** pk/toggle-cursor-color
#+begin_src emacs-lisp
  (setq pk/default-cursor-color (internal-get-lisp-face-attribute 'cursor :background))
  (set-face-attribute 'cursor nil :background "khaki")

  (defun pk/toggle-cursor-color ()
    "Zmienia kolor kursora na khaki / PaleVioletRed1"
    (interactive)
    (setq pk/cursor-color (face-attribute 'cursor :background))
    (if (string= pk/cursor-color "khaki") (set-face-attribute 'cursor nil :background "PaleVioletRed1") (set-face-attribute 'cursor nil :background "khaki"))
    (setq pk/cursor-color (face-attribute 'cursor :background))
    (message "Kolor kursora zmieniony na %s" pk/cursor-color))

  (defun pk/set-cursor-color-to-default ()
    "Wróć do pierwotnego koloru kursora w `misterioso' - #415160"
    (interactive)
    (set-face-attribute 'cursor nil :background pk/default-cursor-color))

  (global-set-key (kbd "H-SPC t k") 'pk/toggle-cursor-color)
  (global-set-key (kbd "H-SPC t d") 'pk/set-cursor-color-to-default)
#+end_src

** pk/replace-quotes-polish-latex
#+begin_src emacs-lisp
  (defun pk-left-paren ()
    (save-excursion
      (while (re-search-forward "\"\\b" nil t)
        (replace-match ",,"))))

  (defun pk-right-paren ()
    (save-excursion
      (while (re-search-forward "\\b\"" nil t)
        (replace-match "''"))))

  (defun pk-right-paren-dot ()
    (save-excursion
      (while (re-search-forward "\\b\\.\"" nil t)
        (replace-match ".''"))))

  (defun pk-replace-parens ()
    "Zamienia angielskie formatowanie cudzysłowów na markup odpowiadający polskiej notacji ,,$''; potrzebne do pdf export via latex"
    (interactive)
    (progn
      (pk-left-paren)
      (pk-right-paren)
      (pk-right-paren-dot)))

    ;; (defun pk/replace-quotes-polish-latex ()
    ;;   "Zamienia angielskie formatowanie cudzysłowów na markup odpowiadający polskiej notacji ,,$''; potrzebne do pdf export via latex"
    ;;   (interactive)
    ;;     (while (not (eq (point) (point-max)))
    ;;       (re-search-forward "\"\\b")
    ;;       (replace-match ",,")
    ;;       (re-search-forward "\\b\\.*\"")
    ;;       (if (eq (match-string 0) "\\b\\.\"")
    ;;           (replace-match ".''")
    ;;         (replace-match "''"))))
#+end_src

** pk-org-goto-dwim
#+begin_src emacs-lisp
  (defun pk-org-goto-dwim ()
    "Jeśli bufor jest zawężony do jakiegoś wątku, najpierw rozszerz, zanim zaczniesz szukać innych wątków."
    (interactive)
    (if (org-buffer-narrowed-p)
        (progn
          (widen)
          (org-goto))
      (org-goto)))
#+end_src

** pk-repare-encoding
#+begin_src emacs-lisp
  ;; sprawdź czy nie szukasz liczb
  (defun pk-not-number-at-point ()
    "Return t if `symbol-at-point' is not a number."
    (interactive)
    (if (thing-at-point 'number)
        (eq t nil) (eq t t)))

  ;; zamień krzaczki na polskie znaki
  (defun pk-repare-encoding ()
    "Zamień krzaczki na polskie znaki na podstawie słowniczka `reguła-kodowania'."
    (interactive)
    (setq reguła-kodowania '(("1" . "ą")
                             ("æ" . "ć")
                             ("ê" . "ę")
                             ("3" . "ł")
                             ("ñ" . "ń")
                             ;;("" . "ó")
                             ("œ" . "ś")
                             ("¿" . "ż")
                             ("Ÿ" . "ź")
                             ("£" . "Ł")
                             ;;(" ̄" . " Ż")
                             ;; brakuje Ź
                             ))
    (setq li (mapcar 'car reguła-kodowania))
    (setq len (length li))
    (save-excursion
      (goto-char (point-min))
      (let ((n 0))
        (while (<= n (- len 1))
          (while (and (re-search-forward (nth n li) nil t) (pk-not-number-at-point))
            (replace-match (assoc-default (nth n li) reguła-kodowania)))
            (setq n (+ n 1))
            (goto-char (point-min))))))
#+end_src

** pk-next/previous-pause
#+begin_src emacs-lisp
(defun pk-next-pause ()
  "Znajdź następny przecinek, średnik lub dwukropek"
  (interactive)
  (re-search-forward "[;|:|,|\"|'|\.|-]" nil t))

(defun pk-previous-pause ()
  "Znajdź następny przecinek, średnik lub dwukropek"
  (interactive)
  (re-search-backward "[;|:|,|\"|'\.|-]" nil t))

;;(global-set-key (kbd "C-M-'") 'pk-next-pause)
;;(global-set-key (kbd "C-M-;") 'pk-previous-pause)
#+end_src

** emphasise word at point
#+begin_src emacs-lisp
;; funkcja pomocnicza: sprawdza, czy kursor znajduje się w zasięgu słowa
(defun pk/word-at-point-p ()
  "Zwraca t, jeśli kursor stoi na słowie, inaczej nil."
  (if (thing-at-point 'word) (eq t t) (eq t nil))
  )	

(defun pk/boldify-word-at-point ()
  "Oznacz słowo przy kursorze jako bold."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t) ;; regex oznacza "spacja" [ ] lub \\| "początek symbolu"  \\|\\_< "albo" \\| "początek linii" ^
        (forward-word)
        (backward-word)
        (insert "*")
        (forward-word)
        (insert "*"))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c b") 'pk/boldify-word-at-point)

(defun pk/emphasise-word-at-point ()
  "Oznacz słowo przy kursorze jako italic."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert "/")
        (forward-word)
        (insert "/"))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c i") 'pk/emphasise-word-at-point)

(defun pk/underline-word-at-point ()
  "Oznacz słowo przy kursorze jako underline."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert "_")
        (forward-word)
        (insert "_"))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c u") 'pk/underline-word-at-point)

(defun pk/verbose-word-at-point ()
  "Oznacz słowo przy kursorze jako verbose."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert "=")
        (forward-word)
        (insert "="))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c v") 'pk/verbose-word-at-point)

(defun pk/crossout-word-at-point ()
  "Oznacz słowo przy kursorze jako verbose."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert "+")
        (forward-word)
        (insert "+"))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c x") 'pk/crossout-word-at-point)

(defun pk/quote-word-at-point ()
  "Oznacz słowo przy kursorze jako cytat."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert "\"")
        (forward-word)
        (insert "\""))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c q") 'pk/quote-word-at-point)

(defun pk/quoteltx-word-at-point ()
  "Oznacz słowo przy kursorze jako verbose."
  (interactive)
  (if (pk/word-at-point-p)
      (progn
        (re-search-backward " \\|\\_<\\|^" nil t)
        (forward-word)
        (backward-word)
        (insert ",,")
        (forward-word)
        (insert "''"))
    (message "Kursor nie znajduje się w zasięgu słowa.")))

(global-set-key (kbd "C-c Q") 'pk/quoteltx-word-at-point)
#+end_src

** pk-copy-paragraph
#+begin_src emacs-lisp :results silent
  (defun pk-copy-paragraph ()
    "Kopiuje cały paragraf, na którym znajduje się kursor nie zmieniając pozycji kursora"
    (interactive)
    (save-excursion
      (let (($beg (progn (forward-paragraph -1) (point)))
            ($beg1 (progn (forward-line) (point)))
            ($beg3 (progn (forward-word 3) (point)))
            ($end (progn (forward-paragraph 1) (point)))
            ($end-3 (progn (backward-word 3) (point)))
            ($end-1 (progn (forward-word 3) (point)))
            $parbeg
            $parend)
        (setq $parbeg (progn (copy-region-as-kill $beg1 $beg3) (car kill-ring)))
        (setq $parend (progn (copy-region-as-kill $end-3 $end-1) (car kill-ring)))
        (copy-region-as-kill $beg $end)
        (message "Paragraf:\n\t %s... ...%s.\nzostał skopiowany." $parbeg $parend))))

  ;; (defun pk-copy-paragraph ()
  ;;   "Kopiuje cały paragraf, na którym znajduje się kursor nie zmieniając pozycji kursora"
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (let (($beg (progn (forward-paragraph -1) (point)))
  ;;           ($end (progn (forward-paragraph 1) (point))))
  ;;       (copy-region-as-kill $beg $end)
  ;;       (message "Paragraf od punktu %s do punktu %s został skopiowany." $beg $end))))

  ;; (global-set-key (kbd "M-P") 'pk-copy-paragraph)
#+end_src

** pk-kill-paragraph-dwim
#+begin_src emacs-lisp :results silent
  (defun pk-kill-paragraph-dwim ()
    "Jeśli nie zaznaczono regionu, zabija cały paragraf, w którym lub bezpośrednio za którym znajduje się kursor; jeśli region jest aktywny, zastanie usunięty."
    (interactive)
    (save-excursion
      (if (use-region-p) (delete-region (region-beginning) (region-end))
        (let (($beg (progn (forward-paragraph -1) (forward-line) (point)))
              ($end (progn (forward-paragraph 1) (point)))
              )
          (kill-region $beg $end)
          ))))

  ;;(global-set-key (kbd "M-G") 'pk-kill-paragraph)
#+end_src

* VARIABLES                                                :variables:
#+begin_src emacs-lisp :results silent
  ;; win
  ;; (when (string-equal system-type "windows-nt")
  ;;   (setq org-directory "C:/Users/piotr/Dropbox/EMACS/")
  ;;   (setq default-directory org-directory)
  ;;   (setq my-school-file "c:/Users/piotr/Dropbox/EMACS/szkoła/szkoła17-18.org")
  ;;   (setq my-school-dir "c:/Users/piotr/Dropbox/EMACS/szkoła/")
  ;;   (setq my-elisp-dir "C:/Users/piotr/Dropbox/EMACS/elisp-proj/") ; wykorzystuje path do pk-browse-el
  ;;   (set-register ?i '(file . "C:/Users/piotr/Dropbox/EMACS/.load/init.org"))
  ;;   (set-register ?n '(file . "C:/Users/piotr/Dropbox/EMACS/notes.org"))
  ;;   (set-register ?s '(file . "C:/Users/piotr/Dropbox/EMACS/SZKOŁA/szkoła17-18.org"))
  ;;   (set-register ?l '(file . "C:/Users/piotr/Dropbox/EMACS/log2017.org"))
  ;;   (set-register ?e '(file . "~/.emacs"))
  ;;   (set-register ?o '(file . "C:/Users/piotr/Dropbox/EMACS/oikonomia.org"))
  ;;   (set-register ?r '(file . "C:/Users/piotr/Dropbox/EMACS/SZKOŁA/ratio/ratio.org"))
  ;;   (add-to-list 'load-path "c:/users/piotr/dropbox/emacs/.load/"))

  ;; linux
  (when (string-equal system-type "gnu/linux")
    (setq org-directory "~/Dropbox/EMACS/")
    (setq default-directory org-directory)
    (setq my-school-file "~/Dropbox/EMACS/szkoła/szkoła17-18.org")
    (setq my-school-dir "~/Dropbox/EMACS/szkoła/")
    (setq my-elisp-dir "~/Dropbox/EMACS/elisp-proj/") ; wykorzystuje path do pk-browse-el
    (set-register ?i '(file . "~/Dropbox/EMACS/.load/init.org"))
    (set-register ?n '(file . "~/Dropbox/EMACS/notes.org"))
    (set-register ?s '(file . "~/Dropbox/EMACS/szkoła/szkoła17-18.org"))
    (set-register ?l '(file . "~/Dropbox/EMACS/log.org"))
    (set-register ?e '(file . "~/.emacs"))
    (set-register ?o '(file . "~/Dropbox/EMACS/oikonomia.org"))
    (set-register ?r '(file . "~/Dropbox/EMACS/szkoła/ratio/ratio.org"))
    (set-register ?x '(file . "~/Dropbox/EMACS/latex/latex_manual.org"))
    (set-register ?z '(file . "~/Dropbox/EMACS/orgzly/Inbox.org"))
    (set-register ?t '(file . "~/Dropbox/EMACS/szkoła/teksty2017-2018.org"))    
    (set-register ?f '(file . "~/Dropbox/EMACS/arch-log.org"))    
    (add-to-list 'load-path "~/Dropbox/EMACS/.load")
    (add-to-list 'load-path "~/.emacs.d/lisp"))

  (set-register ?c '(file . "~/.emacs.d/custom.el"))
  (setq my-log-file (expand-file-name "log.org" org-directory))
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory))
  (setq my-oikos-file (expand-file-name "oikonomia.org" org-directory))
  (setq my-system-log-file (expand-file-name "arch-log.org" org-directory))

    ;;; load-path
  (add-to-list 'load-path "~/.emacs.d/lisp/") ; note: zostawiam, żeby wrzucać tam np. moduły org 

  (setq register-separator ?+)
  (set-register register-separator "\n\n")

  ;; warnings
  ;; (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
#+end_src

* LOAD                                                  :funkcje:load:
** [load] pio/kopiuj do notesu
#+begin_src emacs-lisp :results silent
(load "copy-to-notes")
#+end_src

** [load] pk / misc. (browse, yank link)
#+begin_src emacs-lisp
  ;; funkcje do wyszukiwarek online
  (load "pk-browse")

  ;; kbd browse H-b
  (progn
    (define-prefix-command 'pk-browse-map)
    (define-key pk-browse-map (kbd "g") 'pk-browse-google)
    (define-key pk-browse-map (kbd "l") 'pk-browse-william-whitaker)
    (define-key pk-browse-map (kbd "w") 'pk-browse-wiki))

  (global-set-key (kbd "H-b") 'pk-browse-map)

  ;; wklej skopiowany link z opisem
  (defun pk-yank-link ()
    "Wklej skopiowany link i dodaj opis w `org-mode'"
    (interactive)
    (let ((g (gui-selection-value)))
      (if (eq g nil)
          (message "Ostanią czynnością nie było kopiowanie poza emacsem")
        (progn
          (insert "[[")
          (insert g)
          (insert "][")
          (insert (read-from-minibuffer "Alias: "))
          (insert "]]")))))
 #+end_src

** [load] pk/tbl-ocena-liczba
   #+begin_src emacs-lisp
   (load "tblfm-oceny-szkolne")
   #+end_src

* THEME & MODELINE
*** nice [lenovo & linux] *misterioso*
# skopiować elementy wspólne!
#+begin_src emacs-lisp
  (when (string= system-type "gnu/linux") 
    (progn 
      (load-theme 'misterioso)
      (set-face-attribute 'org-document-title nil :foreground "light salmon" :weight 'normal :height 1.0)
      (set-face-attribute 'org-document-info nil :foreground "turquoise")
      (set-face-attribute 'org-document-info-keyword nil :foreground "pale green")
      ;;(set-face-attribute 'mode-line-inactive nil :background "systemwindowframe" :foreground "#2e3436")
      (set-face-attribute 'org-document-title nil :foreground "light salmon" :height 1.0)
      (set-face-attribute 'org-level-1 nil :foreground "deep sky blue" :weight 'normal :height 1.0)
      (set-face-attribute 'org-level-2 nil :foreground "gold" :weight 'normal :height 1.0)
      (set-face-attribute 'org-level-3 nil :foreground "tomato" :weight 'normal :height 1.0)
      (set-face-attribute 'org-level-4 nil :foreground "medium aquamarine" :weight 'normal :height 1.0)
      (set-face-attribute 'org-level-8 nil :foreground "#16a085" :weight 'normal :height 1.0)
      (set-face-attribute 'org-meta-line nil :foreground "#95a5a6" :slant 'italic)
      (set-face-attribute 'org-priority nil :foreground "firebrick1" :weight 'normal :height 0.8 :slant 'normal)
      (set-face-attribute 'org-tag nil :weight 'normal :height 0.8)
      (set-face-attribute 'org-todo nil :foreground "hot pink" :weight 'normal :height 0.8)
      (set-face-attribute 'org-done nil :foreground "pale green" :weight 'normal :height 0.8)
      (set-face-attribute 'org-block nil :foreground "seashell" :background "#2d3743")
      (set-face-attribute 'org-meta-line nil :foreground "seashell4" :slant 'normal :height 0.9 :inherit nil) 
      (set-face-attribute 'org-special-keyword nil :foreground "steel blue" :weight 'normal :height 0.85)
      (set-face-attribute 'org-property-value nil :foreground "light goldenrod")
      (set-face-attribute 'org-code nil :foreground "sandy brown" :inherit nil)
      (set-face-attribute 'org-date nil :foreground "cadet blue" :height 0.8)
      (set-face-attribute 'org-document-info-keyword nil :height 0.9)
      (defface org-block-begin-line
        '((t (:background "slategray" :height 0.9)))
        "face used for the line delimiting the begin of source blocks.")
      (defface org-block-background '((t (:background "#ffffea")))  "face used for the source block background.")
      (defface org-block-end-line
        '((t (:background "slategray" :height 0.9)))
        "face used for the line delimiting the end of source blocks.")
      (set-face-attribute 'org-block-background nil :background "steelblue4" :height 0.9)
      (set-face-attribute 'org-block-begin-line nil :background "slategray" :foreground "seashell" :height 0.9)
      ;; org-todo
      (setq org-todo-keyword-faces
            '(("spr" . "hotpink3")
              ("piszto" . "lightgoldenrod1") 
              ("redaguj" . "lightgoldenrod4" )
              ("idea" . "sandy brown")
              ("kiedyś" . "SkyBlue4" )
              ("cykl" . "DodgerBlue4")
              ("cancelled" . "dim gray")
              ("mail" . "white")
              ("sent" . "orange")))
      ))

  (when (string= window-system "nil")
    (menu-bar-mode -1)
    (set-face-attribute 'default nil :background "nil"))
#+end_src

*** nice [tablet] *paganini*
Trzeba poprawić face attributes, wysokości Hederów itd. Ale rozwiązanie OK, bo zdaje się, da się to wyłączyć przez disable-theme.
#+begin_src emacs-lisp
      (when (string= (getenv "userdomain") "TABLET")
        (use-package paganini-theme
          :if (window-system)
          :ensure t
          :init
          (progn
            (load-theme 'paganini t)
            (set-face-attribute `mode-line nil :box nil)
            (set-face-attribute `mode-line-inactive nil :box nil)
            (set-face-attribute 'org-level-1 nil :weight 'normal :height 130)
            (set-face-attribute 'org-level-2 nil :weight 'normal :height 125)
            (set-face-attribute 'org-level-3 nil :weight 'normal :height 125)
            (set-face-attribute 'org-level-4 nil :weight 'normal :height 123)
            (set-face-attribute 'org-level-5 nil :weight 'normal :height 123)
            (set-face-attribute 'org-level-6 nil :weight 'normal :height 121)
            (set-face-attribute 'org-level-7 nil :weight 'normal :height 121)
            (set-face-attribute 'org-todo nil :weight 'normal :height 0.9)
            (set-face-attribute 'org-document-info-keyword nil :height 0.9)
            (set-face-attribute 'org-special-keyword nil :weight 'normal :height 0.9 :foreground "#028090")
            (set-face-attribute 'org-date nil :height 0.9)
            (set-face-attribute 'org-meta-line nil :height 0.9)
            (set-face-attribute 'org-tag nil :weight 'normal :height 0.8)
            (set-face-attribute 'org-done nil :weight 'normal :height 0.9)
            (set-face-attribute 'org-priority nil :weight 'normal :height '0.8)
            (set-face-attribute 'org-document-title nil :foreground "salmon":weight 'normal :height 130)
            (set-face-attribute 'org-document-info nil :foreground "PaleGreen1")
            (defface org-block-begin-line
              '((t (:background "DarkSlateGray4" :height 0.9)))
              "Face used for the line delimiting the begin of source blocks.")
            ;; (defface org-block-background '((t (:background "#FFFFEA")))  "Face used for the source block background.")
            (defface org-block-end-line
              '((t (:background "DarkSlateGray4" :height 0.9)))
              "Face used for the line delimiting the end of source blocks.")
            (set-face-attribute 'font-lock-comment-face nil :foreground "#ff69b4")
            (set-face-attribute 'font-lock-warning-face nil :weight 'bold)
            (setq org-todo-keyword-faces
                  '(("spr" . "hotpink3")
                    ("piszto" . "lightgoldenrod1") 
                    ("redaguj" . "lightgoldenrod4" )
                    ("idea" . "sandy brown")
                    ("kiedyś" . "SkyBlue4" )
                    ("cykl" . "DodgerBlue4")
                    ("cancelled" . "dim gray")
                    ("mail" . "white")
                    ("sent" . "orange")))
            )))
#+end_src

*** nice mode line setup
#+begin_src emacs-lisp
  ;; wyłącz mode-line wszędzie
  (setq-default mode-line-format nil)

  ;(set-face-attribute 'mode-line-highlight nil :box nil)

  ;; wyłącz linie i kolumny
  ;(line-number-mode 0)
  ;(column-number-mode 0)
  ;(size-indication-mode 0)

  ;; mode line wyświetla się w header-linie 
  ;;(setq-default header-line-format mode-line-format)

  ;; wyłącz pop-upy z helpem
  ;(tooltip-mode 0)

  ;; display time
  (display-time-mode t)
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq display-time-load-average nil)

  ;; display battery status
  ;(when (string= (getenv "userdomain") "TABLET")
  ;  (display-battery-mode 1))
#+end_src

*** cleanup hidden mode line
#+begin_src emacs-lisp
(defvar-local hidden-mode-line-mode nil)
(defvar-local hide-mode-line nil)

(define-minor-mode hidden-mode-line-mode
  "minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "hidden mode line mode enabled.  "
             "use M-x hidden-mode-line-mode to make the mode-line appear."))))

; activate hidden-mode-line-mode
(hidden-mode-line-mode 1)

 ;; if you want to hide the mode-line in every buffer by default
(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)
#+end_src

*** check header-line setup
#+begin_src emacs-lisp
  (load "header-line-setup-2") 
#+end_src

*** check font-lock hooks
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
                 (lambda ()
                  (font-lock-add-keywords nil
                                          '(("\\<\\(fixme\\|bug\\|BUG\\|FIXME\\|fix\\|FIX\\):" 1 font-lock-warning-face t)
                                            ("\\<\\(todo\\|TODO\\):" 1 '(:foreground "hot pink" :weight bold) t)
                                            ("\\<\\(done\\|DONE\\):" 1 '(:foreground "pale green" :weight bold) t)
                                            ("\\<\\(note\\|NOTE\\):" 1 '(:foreground "orange" :weight bold) t)))))
#+end_src

**** lookup
[[http://emacs-fu.blogspot.com/2008/12/highlighting-todo-fixme-and-friends.html][emacs-fu]] 

* INTERFACE
*** ogólne
#+begin_src emacs-lisp
  ;; frame format
  (setq frame-title-format (list " Emacs " emacs-version " -- @" system-name " -- " (quote (:eval default-directory))))

  ;; niech kursor myszki nie przeszkadza 
  (setq make-pointer-invisible t)
  (cond ((string= (getenv "userdomain") "TABLET") (mouse-avoidance-mode t))
        ((string= (getenv "userdomain") "TABLET") (setq default-line-spacing 0.5)))

  ;; marginesy
  (setq default-left-margin-width 2)

  ;; nie pokazuj pustych linii
  (setq-default indicate-empty-lines nil)

  ;; jedna spacja kończy zdanie 
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  ;; włącz restricted func.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; encoding utf-8
  (setq locale-coding-system 'utf-8) 
  (set-locale-environment "pl_PL.UTF-8")
  (set-terminal-coding-system 'utf-8) 
  (set-keyboard-coding-system 'utf-8) 
  (set-selection-coding-system 'utf-8) 
  (prefer-coding-system 'utf-8)
  (setq system-time-locale "C") ; rozwiązuje problem kodowania time stamps
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  (when (string= system-type "windows-nt")
    (set-clipboard-coding-system 'utf-16le-dos)) ; rozwiązuje problem z wklejaniem ze schowka w windowsie 
  (setq utf-translate-cjk-mode nil) ; disable CJK [=chinese japanese korean] coding/encoding


  ;; ???
  (setq-default indent-tabs-mode nil)

  (defalias 'yes-or-no-p 'y-or-n-p) ;; y or n zamiast yes or no

  ;; some modes
  (winner-mode)
  (electric-pair-mode t)
  (fringe-mode 0)
  (setq-default abbrev-mode t)
  (diminish 'abbrev-mode)
  (setq save-abbrevs 'silently)
  (show-paren-mode t)
  (column-number-mode t)
  (global-visual-line-mode)
  (diminish 'visual-line-mode)
  (diminish 'auto-fill-function " φ")
  (diminish 'emacs-lock-mode)
  ;; (transient-mark-mode nil)
  (setq uniquify-buffer-name-style 'forward) ; ustawia wszystkie ścieżki z '/' zamiast '\'

  ;; linum mode >> odstępy i align (dzięki temu ustawieniu jest odstęp dwóch spacji od numerków i wyrównanie do prawej)
  ;; (pozostałe zmienne wyglądu ustawiłem via custom)
  (setq linum-format "%4d  ")
#+end_src

*** transparency                                           :funkcje:
#+begin_src emacs-lisp
  ;;(when (or (string= (system-name) "manjaroi3") (string= (system-name) "lenovo"))
;;    (set-frame-parameter (selected-frame) 'alpha '(80 . 50))
;;    (add-to-list 'default-frame-alist '(alpha . (80 . 50)))
;;)

  (defun toggle-transparency ()
     (interactive)
     (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                       ((numberp (cdr alpha)) (cdr alpha))
                       ;; also handle undocumented (<active> <inactive>) form.
                       ((numberp (cadr alpha)) (cadr alpha)))
                 100)
            '(80 . 50) '(100 . 100)))))
#+end_src

*** make *scratch* automatically                           :funkcje:
#+begin_src emacs-lisp
  (run-with-idle-timer 1 t
                       '(lambda ()
                          (unless (get-buffer "*scratch*")
                            (with-current-buffer (get-buffer-create "*scratch*")
                              (lisp-interaction-mode)
                              (insert ";;; scratch\n\n")))))
#+end_src

* MINIBUFFER
#+begin_src emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook #'auto-complete-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

;; pozwala na "piętrowe" operacje w mini-b, np. query-replace > C-u M-! pwd RET (wkleja scieżkę aktualnego folderu do polecenia query repl)
(setq enable-recursive-minibuffers t)
#+end_src

* [off] HOOKS
# wyłączam, bo w przypadku `szkoła.org' za długo by się łądował za każdym razem; zamiast tego wpisuję do
# poszczególnych plików odpowiedni src blck
#+begin_src emacs-lisp
;(add-hook 'before-save-hook 'org-table-recalculate-buffer-tables)
#+end_src

* ORG MODE                                                :org:config:
** org-prelim
#+begin_src emacs-lisp
     (use-package org
       :ensure t
       :bind (;("M-SPC a a" . org-agenda) ; opcjonalnie M-SPC a a
              ;("M-SPC a c" . org-capture) ; opcjonalnie M-SPC a c
              ("H-<return>" . org-insert-heading-respect-content))
       :config
    ;; (setq org-hide-emphasis-markers t) ; wyłączam ze względu na czcionki
       (setq org-return-follows-link t)
       (org-indent-mode t)
       (diminish 'org-indent-mode)
       (setq org-babel-no-eval-on-ctrl-c-ctrl-c nil)
       (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
       (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
       (setq org-startup-indented t)
       (setq org-src-fontify-natively t)
  ;;     (setq org-tags-column 80)
       (setq default-justification 'full)
       (add-hook 'org-mode-hook 'turn-on-auto-fill)
       (setq org-list-allow-alphabetical t)
       (setq org-goto-interface 'outline-path-completion
             org-goto-max-level 10)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-confirm-babel-evaluate nil)
       (setq org-log-into-drawer t)
       (setq org-use-speed-commands t) ; włącza speed commands (działają, gdy kursor jest na początku hedera)
       (setq org-confirm-elisp-link-function nil) ; nie pyta o pozwolenie przy egzekucji elisp link 
       (require 'org-checklist)
       )
#+end_src

** org-todo
#+begin_src emacs-lisp :results silent
  (setq org-todo-keywords
        (quote
         ((type "todo(t)" "spr(s)" "|" "done(d@/!)") ; zwykłe, jednorazowe zadania
          (sequence "piszto(p)" "redaguj" "|" "finito(f!)") ; @scribenda
          (sequence "idea(i)" "|" "kiedyś(k@)") ; pomysły (albo przechodzą w aktywne zadania `todo', albo w stan uśpienia `kiedyś')
          (sequence "cykl(c)" "|" "koniec(e)") ; zadania powtarzalne
          (sequence "mail(m)" "|" "sent(w!)") ; mailing
          (sequence "problem(P)" "|" "solved(S@/!)") ; linux info
          (sequence "|" "cancelled(x@/!)")))) ; zadanie skasowane >> do archiwizacji
#+end_src

** org-tags
#+begin_src emacs-lisp
  ;; wyklucz tagi z dziedziczenia
  (setq org-tags-exclude-from-inheritance '("agenda"
                                            "refile"
                                            "scribenda"
                                            "projekt"
                                            "help"
                                            "notes"
                                            "legenda"))
  ;; defoltowa lista tagów:
    (setq org-tag-alist '((:startgroup . nil)
                          ("emacs" . ?e)
                          ("szkoła" . ?s)
                          ("prasówka" . ?P)
                          (:endgroup . nil)
                          (:startgroup . nil)
                          ("scribenda" . ?S)
                          ("legenda" . ?L)
                          ("@videnda" . ?V)
                          ("audienda" . ?A)
                          (:endgroup . nil)
                          (:startgroup . nil)
                          ("retoryka" . ?r)
                          ("dialektyka" . ?d)
                          ("filozofia" . ?f)
                          ("warsztaty" . ?y)
                          (:endgroup . nil)
                          (:startgroup . nil)
                          ("t_al" . ?1) ("2f" . ?2) ("dr" . ?3) ("skrypt" . ?4) ("thibon" . ?5)
                          (:endgroup . nil)
                          (:startgroup . nil)
                          ("ceramiczna" . ?C) ("gruntowa" . ?G) ("auto" . ?V)
                          (:endgroup . nil)
                          (:startgroup . nil)
                          ("mail" . ?m) ("sent" . ?y)
                          (:endgroup . nil)
                          ("agenda" . ?a)
                          ("kbd" . ?k)
                          ("org" . ?o)
                          ("help" . ?h)
                          ("hide" . ?j)
                          ("noex" . ?x)
                          ("refile" . ?w)
                          ("notes" . ?n)
                          ("rachunki" . ?u)
                          ("lekcje" . ?l)
                          ))
#+end_src

** org-agenda
*** agenda-custom-commands
#+begin_src emacs-lisp
    (setq org-agenda-custom-commands
    ;; widok początkowy
          '(("b" "Start"
             ((agenda)
              (todo "mail" ((org-agenda-overriding-header "  MAILING:")))
              (tags "szkoła&agenda/!-piszto" ((org-agenda-overriding-header "  SZKOLNE:")))
              (tags-todo "/!+piszto|+redaguj" ;"TODO=\"piszto\"|\"redaguj\""
                         ((org-agenda-overriding-header "  TEKSTY BIEŻĄCE:")))
              ;;(tags-todo "emacs+agenda" ((org-agenda-overriding-header "  EMACS:")))
              ))
    ;; wszystko związane z emacsem
            ("e" . "Emacs & komp")
            ("ee" "Emacs - zadania"
             ((tags-todo "+emacs-help" ((org-agenda-overriding-header " Emacs - do zrobienia")))))
            ("eh" "Emacs - help"
             ((tags "help&emacs|help&org" ((org-agenda-overriding-header " Emacs - HELP")))))
            ("ew" "Windows - help"
             ((tags "help&win|help&cmd" ((org-agenda-overriding-header " Windows - HELP")))))
    ;; domowe + sprawy do załatwienia            
            ("o" "Oikonomia"
                 ((tags "+oikonomia+ceramiczna"
                        ((org-agenda-overriding-header " Ceramiczna")))
                  (tags "+oikonomia+gruntowa"
                        ((org-agenda-overriding-header " Gruntowa")))
                  (tags-todo "+oikonomia+sprawy"
                        ((org-agenda-overriding-header " Inne")))
                  (tags-todo "+oikonomia+auto"
                        ((org-agenda-overriding-header " Samochód")))))
    ;; rzeczy do uporządkowania w emacsie, czyli refile (a może wrzucić wyżej do "e"?)
            ("r" "Refile"
             ((tags "+refile" ((org-agenda-overriding-header " Notatki do uporządkowania")))))
  ;; szkoła  
            ("x" . "Szkoła")
            ("xt" "Zadania szkolne" 
             ((tags-todo "+CATEGORY=\"notes\"+szkoła" ((org-agenda-overriding-header " Bieżące zadania szkolne")))))
            ("xp" "Plan lekcji"
             ((tags-todo "+szkoła/!+cykl" ((org-agenda-overriding-header " Plan lekcji")))))
    ;; projekty - czyli pisanie większych rzeczy
            ("p" . "Projekty")
            ;; 1 = tekst bieżący i wiszący (aktualnie Tomasz i AL)
            ("p1" "Tomasz i AL"
             ((tags-todo "+t_al/!+todo|+piszto|+redaguj|+publikuj" ((org-agenda-overriding-header " Tomasz & Amoris Laetitia -- zadania")))
              (tags "+t_al+legenda" ((org-agenda-overriding-header "  -- lektury")))
              (tags-todo "+t_al+TODO=\"spr\"" ((org-agenda-overriding-header "  -- do sprawdzenia")))
              (tags "+t_al+notes" ((org-agenda-overriding-header "  -- notatki różne")))))
            ;; 2 = drugi tekst bieżący
            ("p2" "2F"
             ((tags-todo "+2f/!+todo|+piszto|+redaguj|+publikuj" ((org-agenda-overriding-header " 2f -- zadania")))
              (tags "+2f+notes" ((org-agenda-overriding-header "    -- notatki różne")))
              (tags-todo "+2f/!+spr" ((org-agenda-overriding-header "    -- do sprawdzenia")))
              (tags "+2f+legenda" ((org-agenda-overriding-header "    -- lektury")))))
            ;; 3 = DR
            ("p3" "Doktorat"
             ((tags "+dr" ((org-agenda-overriding-header " Notatki do doktoratu")))))
            ;; 4 = Thibon 
            ("p4" "Thibon"
             ((tags "+thibon" ((org-agenda-overriding-header " Esej o postchrześcijaństwie = Thibon")))))
            ;; 5 = skrypty (programy) szkolne
            ("p5" "Skrypty szkolne"
             ((tags "+skrypt" ((org-agenda-overriding-header " Skrypty szkolne")))))
    ;; rzeczy do przeczytania, zobaczenia, przesłuchania
            ("l" "Legenda / videnda / audienda"
             ((tags "legenda" ((org-agenda-overriding-header " Do przeczytania")))
              (tags "videnda" ((org-agenda-overriding-header " Do obejrzenia")))
              (tags "audienda" ((org-agenda-overriding-header " Do posłuchania")))))
    ;; różne "złote myśli"
            ("v" "Silva rerum"
             ((tags "silva" ((org-agenda-overriding-header "Silva rerum")))))
    ;; rzeczy do napisania
            ("n" "Scribenda - pomysły"
             ((tags "scribenda" ((org-agenda-overriding-header "Pomysły na teksty")))))
    ;; rzeczy, które wpadną przy czytaniu rzeczy online (ciekawe artykuły itd.)
            ("P" "Prasówka"
             ((tags "prasówka" ((org-agenda-overriding-header " Linki różne do przejrzenia kiedyś")))))
            (";" "Bieżące"
             ((tags-todo "now" ((org-agenda-overriding-header " Zadania bieżące")))))
            ("w" "Weekly review"
             ((agenda "" ((org-agenda-ndays 7)))
                (stuck "")))
                ))
#+end_src

*** agenda-różne
#+begin_src emacs-lisp
  ;; akcje journala wyświetlają się w agenda view
          (setq org-agenda-include-diary nil
      ;          org-agenda-diary-file "c:/users/piotr/dropbox/emacs/diary.org"
                org-agenda-diary-file my-log-file)

  ;; ustawienia wyświetlania
          (setq org-agenda-start-on-weekday nil
                org-agenda-span 1
                org-agenda-skip-scheduled-if-done t
                org-agenda-skip-deadline-if-done t
                ;; org-agenda-tags-column -142 ; ustawić przez custom
                org-deadline-warning-days 1
                org-agenda-window-setup 'current-window
                org-deadline-warning-days 0)

        (add-hook 'org-agenda-mode-hook
                  '(lambda () (hl-line-mode 1))
                  'append)

        (add-hook 'org-agenda-mode-hook
                  (lambda ()
                    (visual-line-mode -1)
                    (toggle-truncate-lines 1)))

        ;; włącza agendę @startup
        (defun pk/agenda-startup ()
          (org-agenda nil "b")
          (delete-other-windows)
          (get-buffer "*Org Agenda*"))
        (add-hook 'after-init-hook #'pk/agenda-startup)
#+end_src

** org-capture
# prelim
# spr czy nie da się uprościć (np po co org-default-notes-file + my-capture-file?)
#+begin_src emacs-lisp
  (setq my-capture-file org-default-notes-file)
  (setq org-capture-templates
        '(
          ("b" "Bieżące" entry (file+headline my-capture-file "BIEŻĄCE")
           "* todo [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{heder} [/] %^g:now:\nSCHEDULED:%^t\n%?" :prepend t)
          ("n" "Notatka" entry (file+headline my-capture-file "NOTES")
           "* %^{heder} %^g\n:LOGBOOK:\n- capture info: %a, %U\n:END:\n%?" :prepend t)
          ("t" "Todo" entry (file+headline my-capture-file "TODOs")
           "* %^{prompt|todo|spr} %^{heder} %^g:agenda:\nSCHEDULED:%^t\n%?" :prepend t)
          ("x" "Szkoła")
          ("xt" "Szkoła - zadania" entry (file+headline my-capture-file "SZKOŁA")
           "* %^{prompt|todo|spr|mail} %^{heder} %^g:agenda:\nSCHEDULED:%^t\n%?" :prepend t)
          ("xl" "Lekcja" entry (file+headline my-school-file "LEKCJE")
           "* todo %^{numer lekcji} %^{temat lekcji}\n" :prepend t)
          ("e" "Emacs" entry (file+headline my-capture-file "EMACS")
           "* %^{prompt|todo|spr} %^{heder} %^g:agenda:\n:LOGBOOK:\n- capture info: %U\n:END:\n%?" :prepend t)
          ("s" "Scribenda" entry (file+headline my-capture-file "SCRIBENDA")
           "* %^{prompt|piszto|spr|idea|redaguj} %^{heder} %^g:agenda:\n:LOGBOOK:\n- capture info: %a, %U\n:END:\n%?" :prepend t)
          ("l" "Log")
          ("ll" "Log beta (alternatywa dla journal)" entry (file+function my-log-file pk/log-template)
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n%?")
          ("la" "Auto - log" entry (file+olp my-oikos-file "auto" "auto: log")
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n%?" :prepend t :kill-buffer t)
          ("lr" "Rachunki zapłacone" entry (file+olp my-oikos-file "rachunki" "rachunki: log")
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{prompt|ceramiczna|gruntowa|telefon}: %^{prompt|czynsz|gaz|prąd|szambo|dopłaty|internet}, %^{ile} zł %^g" :prepend t :kill-buffer t :immediate-finish t)
          ("ls" "Załatwione sprawy" entry (file+olp my-oikos-file "sprawy inne" "sprawy: log")
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n%?" :prepend t :kill-buffer t)
          ("lx" "Wydarzenia szkolne" entry (file+olp my-school-file "KALENDARIUM" "szkoła: log")
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n\n%i\n%?" :prepend t)
          ("lm" "Mailing szkolny" entry (file+olp my-school-file "KALENDARIUM" "szkoła: log")
           "* %^{prompt|mail|sent} [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n%?" :prepend t)
          ("lf" "System update" entry (file+function my-system-log-file pk/log-template)
           "* [%(format-time-string \"%<%d/%m, %H:%M>\")] %^{header} %^g\n%?")
          ("r" "Wpisy do tabel")
          ("ra" "Auto" table-line (file+olp my-oikos-file "auto" "auto: wydatki")
           "|%?|" :table-line-pos "II-1")
          ("rw" "Wydatki bieżące" table-line (file+olp my-oikos-file "RACHUNKI" "bieżące" "wydatki")
           "|#|%?|" :table-line-pos "II-1")
                                          ; ("d" "Dziennik" entry (file+datetree org-agenda-diary-file) "* %^{heder}\n%?")
          ))
#+end_src
# refile
#+begin_src emacs-lisp
  ;; refile
  (setq org-reverse-note-order t)
  (setq org-refile-use-outline-path nil) ; "non-nil means  provide refile targets as paths"
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache nil)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 4))))
  (setq org-blank-before-new-entry nil)
#+end_src

** org-speed-commands
#+begin_src emacs-lisp :results silent
  (use-package org
    :config
    (progn 
      (add-to-list 'org-speed-commands-user '("k" org-speed-move-safe 'outline-next-visible-heading))
      (add-to-list 'org-speed-commands-user '("i" org-speed-move-safe 'outline-previous-visible-heading))
      (add-to-list 'org-speed-commands-user '("l" org-speed-move-safe 'org-forward-heading-same-level))
      (add-to-list 'org-speed-commands-user '("j" org-speed-move-safe 'org-backward-heading-same-level))
      (add-to-list 'org-speed-commands-user '("g" . org-goto))
      (add-to-list 'org-speed-commands-user '("r" org-refile ))
      (add-to-list 'org-speed-commands-user '("C" . org-cycle))
      (add-to-list 'org-speed-commands-user '("c" . org-copy-subtree))
      (add-to-list 'org-speed-commands-user '("s" . org-narrow-to-subtree))
      (add-to-list 'org-speed-commands-user '("w" . widen))
      (add-to-list 'org-speed-commands-user '("I" . org-shiftmetaup))
      (add-to-list 'org-speed-commands-user '("K" . org-shiftmetadown))
      (add-to-list 'org-speed-commands-user '("f" . org-metaright))
      (add-to-list 'org-speed-commands-user '("d" . org-metaleft))
      (add-to-list 'org-speed-commands-user '("F" . org-shiftmetaright))
      (add-to-list 'org-speed-commands-user '("D" . org-shiftmetaleft))
      (add-to-list 'org-speed-commands-user '("t" . org-todo))
      (add-to-list 'org-speed-commands-user '("x" . org-cut-subtree))
      (add-to-list 'org-speed-commands-user '("v" . org-paste-subtree))))
#+end_src

** org-export
#+begin_src emacs-lisp
  (setq org-export-allow-bind-keywords t) ; pozwala na używanie `#+bind:' w preabmule
  (eval-after-load "org" '(require 'ox-odt nil t)) ; ładuje możliwość eksportu do ODT
#+end_src

** org-babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)))
#+end_src

* other modes / inne modusy
** shell-script-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("bash" . shell-script-mode))
#+end_src

** eww-mode
#+begin_src emacs-lisp
(defun pk-ewwr-dwim (url)
  "Otwórz eww - emacs www mode - w buforze obok"
  (interactive "sWpisz url albo słowa do wyszukania: ")
  (split-window-right)
  (other-window 1)
  (eww-browse-url url "new"))

(defun pk-ewwb-dwim (url)
  "Otwórz eww - emacs www mode - w buforze poniżej"
  (interactive "sWpisz url albo słowa do wyszukania: ")
  (split-window-below)
  (other-window 1)
  (eww-browse-url url "new"))

;;(global-set-key (kbd "<menu> w") 'pk-ewwr-dwim)
;;(global-set-key (kbd "<menu> W") 'pk-ewwb-dwim)
#+end_src
 
* PACZKI                                                      :config:
** [off] wrap-selection
##+begin_src emacs-lisp :results silent
(use-package wrap-region
    :ensure t
    :config (wrap-region-mode))
  (add-hook 'org-mode-hook #'wrap-region-mode)
  (wrap-region-add-wrapper "=" "=" nil 'org-mode) ; select region, hit = then region -> =region= in org-mode
  (wrap-region-add-wrapper "*" "*" nil 'org-mode) ; select region, hit * then region -> *region* in org-mode
  (wrap-region-add-wrapper "/" "/" nil 'org-mode) ; select region, hit / then region -> /region/ in org-mode
  (wrap-region-add-wrapper "_" "_" nil 'org-mode) ; select region, hit _ then region -> _region_ in org-mode
  (wrap-region-add-wrapper "+" "+" nil 'org-mode) ; select region, hit + then region -> +region+ in org-mode

#+end_src

** abbrev                                            :variables:load:
#+begin_src emacs-lisp :results silent
;; żeby wszystkie definicje i statystyki były wspólne
  (setq abbrev-file-name
        (if (pk/system-win-p) "c:/users/piotr/dropbox/emacs/.load/abbrev_defs" "~/Dropbox/EMACS/.load/abbrev_defs"))
#+end_src

** yasnippet                                              :variables:
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
                                          ; using any means: via a hook or by user
                                          ; feel free to add more commands to this
                                          ; list to suit your needs.
    :init ; stuff to do before requiring the package
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    :config ; stuff to do after requiring the package
    (progn
      (setq yas--default-user-snippets-dir
            (if (pk/system-win-p) "c:/users/piotr/dropbox/emacs/.load/snippets/" "~/Dropbox/EMACS/.load/snippets/"))
      (yas-reload-all)
      (yas-global-mode 1)
      ))

(defun yas/org-time-stamp (&rest args)
  "Return the string that `org-insert-time-stamp' would insert."
  (with-temp-buffer
    (apply #'org-time-stamp args)
    (buffer-string)))

(defun yas/org-time-stamp-inactive (&rest args) 
  "Return the string that `org-insert-time-stamp' (inactive) would insert."
  (with-temp-buffer
    (apply #'org-time-stamp-inactive args)
    (buffer-string)))
#+end_src

** ivy, counsel itd.
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-x c-f" . counsel-find-file))

  (use-package swiper
    :bind
    (([remap isearch-forward]  . swiper)
     ([remap isearch-backward] . swiper)))

    (use-package ivy
      :ensure t
      :diminish ivy-mode
      :config
      (ivy-mode 1)
      )
#+end_src

** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-;" . avy-goto-char-2))
#+end_src

** switch window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :bind ("M-/" . switch-window)
    :config
    (setq switch-window-shortcut-style 'qwerty)
    )
#+end_src

** writeroom
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t
    )
#+end_src

** ispell > add dictionary (aspell)
#+begin_src emacs-lisp
    (when (string= (getenv "userdomain") "TABLET")
      (add-to-list 'exec-path "c:/program files/aspell/bin/"))

  (when (string-equal system-type "windows-nt")
    (setq ispell-program-name "aspell")
    (require 'ispell)
    (setq ispell-dictionary "polish")
    (setq ispell-alternate-dictionary "polish"))

  (when (string= system-type "gnu/linux")
    (if (string= system-name "x200")
        (add-to-list 'exec-path "/usr/bin/")
      (add-to-list 'exec-path "/usr/bin/aspell/bin/"))
    (setq ispell-program-name "aspell")
    (require 'ispell)
    (setq ispell-dictionary "polish")
    (setq ispell-alternate-dictionary "polish"))
#+end_src

** auto-complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :diminish auto-complete-mode " α"
    :config
    (ac-config-default)
    ;; (add-hook 'emacs-lisp-mode-hook 'auto-complete-mode)
    (add-hook 'conf-space-mode-hook 'auto-complete-mode)
    (add-hook 'LaTeX-mode-hook 'auto-complete-mode)
    )
#+end_src

** dim.el (diminish for major modes)
#+begin_src emacs-lisp
  (use-package dim
    :ensure t
    :config
    (dim-major-name 'lisp-interaction-mode "Λ")
    (dim-major-name 'emacs-lisp-mode "Λ")
    (dim-major-name 'org-mode "Ω")
    (dim-major-name 'org-agenda-mode "")
    (dim-major-name 'latex-mode "Χα")
    (dim-major-name 'TeX-latex-mode "Χα")
    (dim-major-name 'tex-mode "Χα")
    )
#+end_src

** ibuffer
#+begin_src emacs-lisp :results silent
  ;; moje filtry
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("DIRED" (mode . dired-mode))
                 ("notatki / GTD" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^diary.org$")
                             (name . "^\\*Org Agenda\\*$")
                             (name . "^notes.org$")
                             (name . "^\\*notes\\*$")))
                 ("CONFIG" (or
                            (name . "^init.org$")
                            (name . "\\.emacs$")))
                 ("EMACS" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")
                           (name . "^\\*Buffer List\\*$")
                           (name . "^\\*Help\\*$")))
                 ("ORG" (or
                         (mode . org-mode)))
                 ("ELISP" (or
                          (mode . emacs-lisp-mode)
                          (mode . lisp-interaction-mode)))
                 ("WWW" (mode . eww-mode))
                 ("PDF" (or
                         (mode . pdf-view-mode)))
                 ("LaTeX" (or
                           (name . "^\\*.tex$")))
                 ))))

  ;; dodaj powyższe grupy do ibuffera
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; ukryj puste grupy
  (setq ibuffer-show-empty-filter-groups nil)
  ;; nie pytaj czy zabić bufor
  (setq ibuffer-expert t)

  ;; keeps ibuffer list up to date
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "default")))

  ;; nie pokazuj niektórych buforów (np. nieużywanego "diary")
  (require 'ibuf-ext)   
  (add-to-list 'ibuffer-never-show-predicates "^diary$")
  (add-to-list 'ibuffer-never-show-predicates "^\\*Backtrace\\*$")
  (add-to-list 'ibuffer-never-show-predicates "^\\*Messages\\*$")
#+end_src

** [tablet] disable mouse
#+BEGIN_SRC emacs-lisp
  (when (string= (getenv "userdomain") "TABLET")
    (use-package disable-mouse
      :ensure t
      :diminish global-disable-mouse-mode 
      :config (global-disable-mouse-mode t)))
#+END_SRC

** highlight-defined
#+begin_src emacs-lisp
  (use-package highlight-defined
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
#+end_src

** smartparens
#+begin_src emacs-lisp
    (use-package smartparens
      :ensure t
      :diminish " π"
      :config
      (require 'smartparens-config)
      (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
      (show-smartparens-mode))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp :results silent
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+end_src

** pio-wc-mode
# rozwiązanie tymczasowe > jeśli wszystko będzie działać, przerzucić plik na dysk w tablecie?
#+begin_src emacs-lisp
(load "pio-wc-mode")
#+end_src

** pdf-tools & org-pdfview
#+begin_src emacs-lisp
  (when (pk/system-linux-p)
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))
    (use-package org-pdfview
      :ensure t
      :config
      (eval-after-load 'org '(require 'org-pdfview))
      (add-to-list 'org-file-apps 
                   '("\\.pdf" . (lambda (file link)
                                     (org-pdfview-open link))))
      ))
#+end_src

** auctex / latex
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook 'linum-mode)
#+end_src

** latex-extra
#+begin_src emacs-lisp
    (use-package latex-extra
      :ensure t
      :diminish "Χε")

    (require 'latex-extra)
    (add-hook 'LaTeX-mode-hook #'latex-extra-mode)
#+end_src

** [off] org-ref
# #+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
    :config
    (when (pk/system-win-p) (setq reftex-default-bibliography '("c:/users/piotr/dropbox/emacs/ref/biblio.bib")))
    (when (pk/system-linux-p) (setq reftex-default-bibliography '("~/Dropbox/EMACS/ref/biblio.bib")))
    ;; see org-ref for use of these variables
    (when (pk/system-win-p) (setq org-ref-bibliography-notes "c:/users/piotr/dropbox/emacs/ref/bib-notes.org"
                                  org-ref-default-bibliography '("c:/users/piotr/dropbox/emacs/ref/biblio.bib")
                                  org-ref-pdf-directory "c:/users/piotr/dropbox/emacs/ref/bibtex-pdfs/"))
    (when (pk/system-linux-p) (setq org-ref-bibliography-notes "~/Dropbox/EMACS/ref/bib-notes.org"
                                    org-ref-default-bibliography '("~/Dropbox/EMACS/ref/biblio.bib")
                                    org-ref-pdf-directory "~/Dropbox/EMACS/ref/bibtex-pdfs/"))
    ;; (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib"
    ;;       bibtex-completion-library-path "~/Dropbox/bibliography/bibtex-pdfs"
    ;;       bibtex-completion-notes-path "~/Dropbox/bibliography/helm-bibtex-notes")

    ;; open pdf with system pdf viewer (works on mac)
    ;; (setq bibtex-completion-pdf-open-function
    ;;   (lambda (fpath)
    ;;     (start-process "open" "*open*" "open" fpath)))

    ;; alternative
    ;; (setq bibtex-completion-pdf-open-function 'org-open-file)

    ;; There are alternative citation key completion methods.
    ;; org-ref-ivy-cite
    (require 'org-ref))

(setq reftex-default-bibliography "c:/users/piotr/dropbox/emacs/ref/biblio.bib")
#+end_src

** dired+
#+begin_src emacs-lisp
(use-package dired+
  :ensure t
  :config (require 'dired+)
  )
#+end_src
** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config (require 'multiple-cursors)
    )
#+end_src

* EKSPORT
** LaTeX
#+begin_src emacs-lisp
  (require 'org)
  ;;(require 'org-latex)  
  (require 'ox-latex)
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))
  (add-to-list 'org-export-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))

  (with-eval-after-load 'ox-latex  
    (add-to-list 'org-latex-classes
                 '("koma-article"
                   "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-export-latex-classes
                 `("book"
                   "\\documentclass{book}"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                 ;; beamer class, for presentations
                 '("beamer"
                   "\\documentclass[11pt]{beamer}\n
        \\mode<{{{beamermode}}}>\n
        \\usetheme{{{{beamertheme}}}}\n
        \\usecolortheme{{{{beamercolortheme}}}}\n
        \\beamertemplateballitem\n
        \\setbeameroption{show notes}
        \\usepackage[utf8]{inputenc}\n
        \\usepackage[T1]{fontenc}\n
        \\usepackage{hyperref}\n
        \\usepackage{color}
        \\usepackage{listings}
        \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
    frame=single,
    basicstyle=\\small,
    showspaces=false,showstringspaces=false,
    showtabs=false,
    keywordstyle=\\color{blue}\\bfseries,
    commentstyle=\\color{red},
    }\n
        \\usepackage{verbatim}\n
        \\institute{{{{beamerinstitute}}}}\n          
         \\subject{{{{beamersubject}}}}\n"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\begin{frame}[fragile]\\frametitle{%s}"
                    "\\end{frame}"
                    "\\begin{frame}[fragile]\\frametitle{%s}"
                    "\\end{frame}")))
    )

  ;; #+LaTeX_CLASS: beamer in org files
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))


  (when (string= system-name "lenovo")
    (add-to-list 'exec-path "/usr/bin/"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex . t)))
#+end_src

** html
#+begin_src emacs-lisp
(setq org-html-validation-link nil)
#+end_src

* KBD                                                         :config:
** ogólne (apps = H)
#+begin_src emacs-lisp :results silent
  ;; ustaw apps jako hyper  
  (when (pk/system-win-p) (setq w32-apps-modifier 'hyper))

  ;; wyłącz emacsa jak inne okna w windowsie + zapisz bufory
  (when (pk/system-linux-p) (global-set-key (kbd "M-S-<f4>") 'save-buffers-kill-emacs))
  (when (string= (getenv "userdomain") "TABLET") (global-set-key (kbd "H-M-q") 'save-buffers-kill-emacs))

  ;; ustawienia dla win
  (when (string= system-type "windows-nt")
    (global-set-key (kbd "H-s") 'swiper)
    (global-set-key (kbd "H-q") 'eval-last-sexp)
    (global-set-key (kbd "H-1") 'delete-other-windows)
    (global-set-key (kbd "H-2") 'pk/split-and-switch-b) ; zamiast: 'split-window-below
    (global-set-key (kbd "H-3") 'pk/split-and-switch-r) ; zamiast: 'split-window-right
    (global-set-key (kbd "H-4") 'clone-indirect-buffer-other-window)
    (global-set-key (kbd "H-0") 'delete-window)
    (global-set-key (kbd "H-a") 'universal-argument)
    ;; kopiuj do notesu
    (global-set-key (kbd "H-c") 'pio/copy-to-notes)
    (global-set-key (kbd "H-v") 'pio/copy-to-notes-clean)
    (global-set-key (kbd "H-x") 'pio/copy-to-notes-clear)
    (global-set-key (kbd "H-l") 'pio/copy-to-notes-interlinia)
    (global-set-key (kbd "H-L") 'pio/copy-to-notes-interlinia-reset)
    ;; dabrev! (+ C-M-/ 'dabrev-completion)
    (global-set-key (kbd "H-<tab>") 'dabbrev-expand)
    ;;  (global-set-key (kbd "H-c") 'pk-copy-line)
    (global-set-key (kbd "H-z") 'dired)
    ;; org shiftup and down
    (global-set-key (kbd "H-i") 'org-shiftup)
    (global-set-key (kbd "H-k") 'org-shiftdown))
     #+end_src

# outline z H + defr
#+begin_src emacs-lisp :results silent
  ;; win
  (when (string= system-type "windows-nt")
    (progn  
      (global-set-key (kbd "H-d") 'outline-next-visible-heading)
      (global-set-key (kbd "H-e") 'outline-previous-visible-heading)
      (global-set-key (kbd "H-f") 'org-forward-heading-same-level)
      (global-set-key (kbd "H-r") 'org-backward-heading-same-level)
      ))

  ;; linux
  (when (string= system-type "gnu/linux")
      (global-unset-key (kbd "<menu>"))
      (global-set-key (kbd "<menu> d") 'outline-next-visible-heading)
      (global-set-key (kbd "<menu> e") 'outline-previous-visible-heading)
      (global-set-key (kbd "<menu> f") 'org-forward-heading-same-level)
      (global-set-key (kbd "<menu> r") 'org-backward-heading-same-level)
      )
#+end_src

# wsparcie CONTROL
#+begin_src emacs-lisp :results silent
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C-0") (lambda () (interactive) (text-scale-adjust 0)))
#+end_src

** nawigacja z M
#+BEGIN_SRC emacs-lisp :results silent
        (progn
           (global-set-key (kbd "M-j") 'backward-char)
           (global-set-key (kbd "M-l") 'forward-char)
           (global-set-key (kbd "M-k") 'next-line)
           (global-set-key (kbd "M-i") 'previous-line)
           (global-set-key (kbd "M-;") 'pk/end-of-line-no-tags)
           (global-unset-key (kbd "M-h"))
           (global-set-key (kbd "M-h") 'beginning-of-line)
           (global-set-key (kbd "M-o") 'forward-word)
           (global-set-key (kbd "M-u") 'backward-word)
           (global-set-key (kbd "M-.") 'forward-sentence)
           (global-set-key (kbd "M-m") 'backward-sentence)
           (global-set-key (kbd "C-M-;") 'pk-next-pause)
           (global-set-key (kbd "C-M-'") 'pk-previous-pause)
           (global-set-key (kbd "M-,") 'forward-paragraph)
           (global-set-key (kbd "M-8") 'backward-paragraph)
           (global-set-key (kbd "M-\"") 'exchange-point-and-mark)
           (global-set-key (kbd "M-d") 'kill-word)
           (global-set-key (kbd "M-f") 'backward-kill-word)
           (global-set-key (kbd "M-s") 'yank)
           (global-set-key (kbd "M-w") 'kill-line)
           (global-set-key (kbd "M-D") 'kill-sentence)
           (global-set-key (kbd "M-'") 'set-mark-command)
           (global-unset-key (kbd "M-e"))
           (global-set-key (kbd "M-e") 'delete-char)
           (global-set-key (kbd "M-r") 'delete-backward-char)
           (global-set-key (kbd "M-)") 'org-shiftright)
           (global-set-key (kbd "M-(") 'org-shiftleft)
           (global-set-key (kbd "M-c") 'pk/copy-line-or-region) ; zamist: kill-ring-save
           (global-set-key (kbd "M-v") 'yank)
           (global-set-key (kbd "M-g") 'kill-region)
           (global-set-key (kbd "M-G") 'pk-kill-paragraph-dwim) ; zamiast: delete-region
           (global-set-key (kbd "M-n") 'switch-to-buffer)
           (global-set-key (kbd "M-N") 'counsel-find-file)
           (global-set-key (kbd "M-q") 'kill-this-buffer)
           (global-unset-key (kbd "M-a"))
           (global-set-key (kbd "M-a") 'mark-whole-buffer)
           (global-set-key (kbd "M-s") 'save-buffer)
           (global-set-key (kbd "M-b") 'ibuffer)
           (global-set-key (kbd "M-p") 'comment-dwim)
           (global-set-key (kbd "M-P") 'pk-copy-paragraph)
           (global-set-key (kbd "M-[") 'fill-paragraph)
           (global-set-key (kbd "M-]") 'previous-buffer)
           (global-set-key (kbd "M-\\") 'next-buffer)
           ;(global-set-key (kbd "M-A") 'xah-delete-current-text-block)
           (global-set-key (kbd "M-C") 'org-copy-subtree)
           (global-set-key (kbd "M-X") 'org-cut-subtree)
           (global-set-key (kbd "M-V") 'org-paste-subtree)
           (global-set-key (kbd "M-A") (lambda () (interactive)(org-agenda t "a")))
           ) 

    (progn
      (global-set-key (kbd "M-I") 'org-metaup)
      (global-set-key (kbd "M-K") 'org-metadown)
      )

      (progn
        (require 'org)
        (define-key org-mode-map (kbd "M-h") 'beginning-of-line)
        (define-key org-mode-map (kbd "M-a") 'mark-whole-buffer)
        (define-key org-mode-map (kbd "M-e") 'delete-char)
        (define-key org-mode-map (kbd "<f9>") 'org-clock-in)
        (define-key org-mode-map (kbd "M-<f9>") 'org-clock-out)
        (define-key org-mode-map (kbd "S-<f9>") 'org-clock-goto))

    (progn
      (require 'org-capture)
      (define-key org-capture-mode-map (kbd "M-SPC c") 'org-capture-finalize)
      (define-key org-capture-mode-map (kbd "M-SPC k") 'org-capture-kill)
      (define-key org-capture-mode-map (kbd "M-SPC r") 'org-capture-refile)
      (require 'org-agenda)
      (define-key org-agenda-mode-map (kbd "M-SPC s") 'org-agenda-schedule)
      (define-key org-agenda-mode-map (kbd "M-SPC d") 'org-agenda-deadline)
      )

    (progn
      (require 'ivy)
      (define-key ivy-mode-map (kbd "M-i") 'previous-line))
#+END_SRC

** M-SPC >> org + nawigacja cd.
# org mode map
#+begin_src emacs-lisp :results silent
  (progn
    (define-prefix-command 'pk-org-mode-map)
    (define-key pk-org-mode-map (kbd "c") 'org-ctrl-c-ctrl-c)
    (define-key pk-org-mode-map (kbd "t") 'org-set-tags-command)
    (define-key pk-org-mode-map (kbd "s") 'org-schedule)
    (define-key pk-org-mode-map (kbd "d") 'org-deadline)
    (define-key pk-org-mode-map (kbd ".") 'org-time-stamp)
    (define-key pk-org-mode-map (kbd ">") 'org-time-stamp-inactive)
    (define-key pk-org-mode-map (kbd "x") 'org-store-link)
    (define-key pk-org-mode-map (kbd "l") 'org-insert-link)
    (define-key pk-org-mode-map (kbd "L") 'pk-yank-link)
    (define-key pk-org-mode-map (kbd "k") 'org-mark-ring-goto)
    (define-key pk-org-mode-map (kbd "K") 'org-mark-ring-push)
    (define-key pk-org-mode-map (kbd "o") 'org-mode)
    (define-key pk-org-mode-map (kbd "O") 'org-open-at-point)
    (define-key pk-org-mode-map (kbd "0") 'org-latex-export-to-pdf)   
    (define-key pk-org-mode-map (kbd "1") 'org-align-all-tags)
    (define-key pk-org-mode-map (kbd "2") 'pk-org-insert-heading-2)
    (define-key pk-org-mode-map (kbd "3") 'pk-org-insert-heading-3)
    (define-key pk-org-mode-map (kbd "4") 'pk-org-insert-heading-4)
    (define-key pk-org-mode-map (kbd "5") 'pk-org-insert-heading-5)
    (define-key pk-org-mode-map (kbd "6") 'pk-org-insert-heading-6)
    (define-key pk-org-mode-map (kbd ";") 'org-edit-special)
    (define-key pk-org-mode-map (kbd "e") 'org-edit-src-exit)
    (define-key pk-org-mode-map (kbd "E") 'org-export-dispatch)
    (define-key pk-org-mode-map (kbd "'") 'org-edit-src-abort)    
    (define-key pk-org-mode-map (kbd "n s") 'org-narrow-to-subtree)
    (define-key pk-org-mode-map (kbd "n r") 'narrow-to-region)
    (define-key pk-org-mode-map (kbd "n d") 'narrow-to-defun)
    (define-key pk-org-mode-map (kbd "w") 'widen)
    (define-key pk-org-mode-map (kbd "i") 'ispell)
    (define-key pk-org-mode-map (kbd "I") 'ispell-word)
    (define-key pk-org-mode-map (kbd "j") 'set-justification-full)
    (define-key pk-org-mode-map (kbd "f") 'fill-region)
    (define-key pk-org-mode-map (kbd "p") 'fill-paragraph)
    (define-key pk-org-mode-map (kbd "g") 'pk-org-goto-dwim)
    (define-key pk-org-mode-map (kbd "r") 'jump-to-register)
    (define-key pk-org-mode-map (kbd "R") 'org-refile)
    (define-key pk-org-mode-map (kbd "a a") 'org-agenda)
    (define-key pk-org-mode-map (kbd "a ]") 'org-agenda-file-to-front)
    (define-key pk-org-mode-map (kbd "a [") 'org-remove-file)
    (define-key pk-org-mode-map (kbd "a c") 'org-capture)
    (define-key pk-org-mode-map (kbd ")") 'org-metaright)
    (define-key pk-org-mode-map (kbd "(") 'org-metaleft)
    (define-key pk-org-mode-map (kbd "M-]") 'org-shiftright)
    (define-key pk-org-mode-map (kbd "M-[") 'org-shiftleft)
    (define-key pk-org-mode-map (kbd "z") 'org-add-note)
    (define-key pk-org-mode-map (kbd "D") 'dired)
    (define-key pk-org-mode-map (kbd "T") 'org-todo)
    (define-key pk-org-mode-map (kbd "-") 'org-table-insert-hline)
    (define-key pk-org-mode-map (kbd "_") 'org-table-insert-row)
    (define-key pk-org-mode-map (kbd "|") 'org-table-insert-column)
    (define-key pk-org-mode-map (kbd "@") 'org-open-at-point)
    (define-key pk-org-mode-map (kbd "M-t") 'pio/insert-date)
    (define-key pk-org-mode-map (kbd "M-e") 'eval-last-sexp)
    (define-key pk-org-mode-map (kbd "X") 'org-cut-subtree)
    (define-key pk-org-mode-map (kbd "M-SPC b") 'org-beamer-export-to-pdf)
    )

                                          ;(global-set-key (kbd "H-SPC") nil)
  (global-set-key (kbd "M-SPC") 'pk-org-mode-map)
#+end_src

# org agenda funkcyjne
#+begin_src emacs-lisp :results silent
(global-set-key (kbd "<f5>") (lambda () (interactive)(org-agenda t "b")))
;;(global-set-key (kbd "<f6>") (lambda () (interactive)(org-agenda t "p1")))
;;(global-set-key (kbd "<f7>") (lambda () (interactive)(org-agenda t "p2")))
;;(global-set-key (kbd "<f8>") (lambda () (interactive)(org-agenda t "p1")))
;;(global-set-key (kbd "<f9>") (lambda () (interactive)(org-agenda t "p1")))
#+end_src

** H-SPC >> różne submapy
*** # r: registers
#+begin_src emacs-lisp :results silent
  ;; r >> submap dla register 
  (when (string= system-type "windows-nt")
    (progn
    (global-set-key [(?\H- ) (r) (t)] 'increment-register) ; "?\H- " oznacza H-SPC
    (global-set-key [(?\H- ) (r) (c)] 'copy-to-register)
    (global-set-key [(?\H- ) (r) (p)] 'prepend-to-register)
    (global-set-key [(?\H- ) (r) (a)] 'append-to-register)
    (global-set-key [(?\H- ) (r) (i)] 'insert-register)
    (global-set-key [(?\H- ) (r) (w)] 'window-configuration-to-register)
    (global-set-key [(?\H- ) (r) (v)] 'view-register)
    ))

  (when (string= system-type "gnu/linux")
    (progn
    ;(global-unset-key (kbd "<menu>"))
    (global-set-key (kbd "<menu> SPC r t") 'increment-register) ; "?\s- " oznacza s-SPC
    (global-set-key (kbd "<menu> SPC r c") 'copy-to-register)
    (global-set-key (kbd "<menu> SPC r p") 'prepend-to-register)
    (global-set-key (kbd "<menu> SPC r a") 'append-to-register)
    (global-set-key (kbd "<menu> SPC r i") 'insert-register)
    (global-set-key (kbd "<menu> SPC r w") 'window-configuration-to-register)
    (global-set-key (kbd "<menu> SPC r v") 'view-register)
    ))
#+end_src

*** # b: browse
#+begin_src emacs-lisp :results silent
  ;; b >> browse
  (when (string= system-type "windows-nt")
    (progn 
     ;; pk browse zdefiniowane wcześniej
     ;; w - wiki, g - google, l - whitaker
     (global-set-key (kbd "H-SPC b c i") 'pk/corp-thom-index)
     (global-set-key (kbd "H-SPC b c o") 'pk/corp-thom-omnia)
     (global-set-key (kbd "H-SPC b d") 'pk/e-dziennik)
     ))

  (when (string= system-type "gnu/linux")
    (progn
     ;; pk browse zdefiniowane wcześniej
     ;; w - wiki, g - google, l - whitaker
     (global-set-key (kbd "<menu> SPC b c i") 'pk/corp-thom-index)
     (global-set-key (kbd "<menu> SPC b c o") 'pk/corp-thom-omnia)
     (global-set-key (kbd "<menu> SPC b d") 'pk/e-dziennik)
     (global-set-key (kbd "<menu> SPC b l") 'pk-browse-william-whitaker)
     ))
#+end_src

*** # d: describe
#+begin_src emacs-lisp :results silent
    ;; d >> describe submap
  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (d) (v)] 'describe-variable)
      (global-set-key [(?\H- ) (d) (f)] 'describe-function)
      (global-set-key [(?\H- ) (d) (b)] 'describe-bindings)
      (global-set-key [(?\H- ) (d) (c)] 'describe-face)
      (global-set-key [(?\H- ) (d) (k)] 'describe-key)
      (global-set-key [(?\H- ) (d) (m)] 'describe-mode)    
      ))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC d v") 'describe-variable)
      (global-set-key (kbd "<menu> SPC d f") 'describe-function)
      (global-set-key (kbd "<menu> SPC d b") 'describe-bindings)
      (global-set-key (kbd "<menu> SPC d c") 'describe-face)
      (global-set-key (kbd "<menu> SPC d k") 'describe-key)
      (global-set-key (kbd "<menu> SPC d m") 'describe-mode)    
      ))
#+end_src

*** # c: case 
#+begin_src emacs-lisp

  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (c) (u)] 'upcase-word)
      (global-set-key [(?\H- ) (c) (d)] 'downcase-word)
      (global-set-key [(?\H- ) (c) (D)] 'downcase-region)
      (global-set-key [(?\H- ) (c) (U)] 'upcase-region)
      (global-set-key [(?\H- ) (c) (c)] 'upcase-dwim)
      ))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC c u") 'upcase-word)
      (global-set-key (kbd "<menu> SPC c d") 'downcase-word)
      (global-set-key (kbd "<menu> SPC c D") 'downcase-region)
      (global-set-key (kbd "<menu> SPC c U") 'upcase-region)
      (global-set-key (kbd "<menu> SPC c c") 'upcase-dwim)
      ))
#+end_src

*** # w: switch window & winner mode (f / b)
#+begin_src emacs-lisp :results silent
  (when (string= system-type "windows-nt")
    (progn
     (global-set-key [(?\H- ) (w) (l)] 'switch-window-mvborder-left)
     (global-set-key [(?\H- ) (w) (r)] 'switch-window-mvborder-right)
     (global-set-key [(?\H- ) (w) (u)] 'switch-window-mvborder-up)
     (global-set-key [(?\H- ) (w) (d)] 'switch-window-mvborder-down)
     (global-set-key [(?\H- ) (w) (b)] 'winner-undo)
     (global-set-key [(?\H- ) (w) (f)] 'winner-redo)
     ))

  (when (string= system-type "gnu/linux")
    (progn
     (global-set-key (kbd "<menu> SPC w l") 'switch-window-mvborder-left)
     (global-set-key (kbd "<menu> SPC w r") 'switch-window-mvborder-right)
     (global-set-key (kbd "<menu> SPC w u") 'switch-window-mvborder-up)
     (global-set-key (kbd "<menu> SPC w d") 'switch-window-mvborder-down)
     (global-set-key (kbd "<menu> SPC w b") 'winner-undo)
     (global-set-key (kbd "<menu> SPC w f") 'winner-redo)
     ))

  (when (string= system-name "x200")
    (progn
      (global-set-key (kbd "<XF86Back>") 'winner-undo)
      (global-set-key (kbd "<XF86Forward>") 'winner-redo)
      (global-set-key (kbd "S-<XF86Back>") 'switch-window-mvborder-left)
      (global-set-key (kbd "S-<XF86Forward>") 'switch-window-mvborder-right)
      (global-set-key (kbd "C-<XF86Back>") 'switch-window-mvborder-up)
      (global-set-key (kbd "C-<XF86Forward>") 'switch-window-mvborder-down)))
#+end_src

*** # y: yas
#+begin_src emacs-lisp :results silent
  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (y) (v)] 'yas-visit-snippet-file)
      (global-set-key [(?\H- ) (y) (n)] 'yas-new-snippet)
      (global-set-key [(?\H- ) (y) (y)] 'yas-minor-mode)
      ))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC y v") 'yas-visit-snippet-file)
      (global-set-key (kbd "<menu> SPC y n") 'yas-new-snippet)
      (global-set-key (kbd "<menu> SPC y y") 'yas-minor-mode)
      ))
#+end_src

*** # t: toggle 
#+begin_src emacs-lisp :results silent
  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (t) (t)] 'toggle-transparency)
      (global-set-key [(?\H- ) (t) (m)] 'hidden-mode-line-mode)
      (global-set-key [(?\H- ) (t) (f)] 'toggle-frame-fullscreen)
      (global-set-key [(?\H- ) (t) (+)] 'text-scale-increase)
      (global-set-key [(?\H- ) (t) (-)] 'text-scale-decrease)
      (global-set-key [(?\H- ) (t) (n)] 'global-disable-mouse-mode)
      (global-set-key [(?\H- ) (t) (w)] 'toggle-frame-maximized)
      ))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC t t") 'toggle-transparency)
      (global-set-key (kbd "<menu> SPC t m") 'hidden-mode-line-mode)
      (global-set-key (kbd "<menu> SPC t f") 'toggle-frame-fullscreen)
      (global-set-key (kbd "<menu> SPC t +") 'text-scale-increase)
      (global-set-key (kbd "<menu> SPC t -") 'text-scale-decrease)
      (global-set-key (kbd "<menu> SPC t n") 'global-disable-mouse-mode)
      (global-set-key (kbd "<menu> SPC t w") 'toggle-frame-maximized)
      ))
#+end_src

to samo zrobić z bookmarkami > [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html#Bookmarks][link do funkcji]]
*** # a: abbrev
#+begin_src emacs-lisp :results silent
  (defun pk/visit-abbrev-file ()
    "otwórz `abbrev_defs'"
    (interactive)    
    (switch-to-buffer (expand-file-name "abbrev_defs" user-emacs-directory)))

  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (a) (g)] 'add-global-abbrev)
      (global-set-key [(?\H- ) (a) (l)] 'add-mode-abbrev)
      (global-set-key [(?\H- ) (a) (v)] 'pk/visit-abbrev-file)
      (global-set-key [(?\H- ) (a) (r)] '(lambda () (interactive) (add-global-abbrev -1)))))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC a g") 'add-global-abbrev)
      (global-set-key (kbd "<menu> SPC a l") 'add-mode-abbrev)
      (global-set-key (kbd "<menu> SPC a v") 'pk/visit-abbrev-file)
      (global-set-key (kbd "<menu> SPC a r") '(lambda () (interactive) (add-global-abbrev -1))))) 
#+end_src

*** # f: auto-fill & justify
#+begin_src emacs-lisp
  (when (string= system-type "windows-nt")
    (progn
      (global-set-key [(?\H- ) (f) (s)] 'set-fill-column)
      (global-set-key [(?\H- ) (f) (m)] 'auto-fill-mode)
      (global-set-key [(?\H- ) (f) (f)] 'fill-region)
      (global-set-key [(?\H- ) (f) (p)] 'fill-paragraph)
    ))

  (when (string= system-type "gnu/linux")
    (progn
      (global-set-key (kbd "<menu> SPC f s") 'set-fill-column)
      (global-set-key (kbd "<menu> SPC f m") 'auto-fill-mode)
      (global-set-key (kbd "<menu> SPC f f") 'fill-region)
      (global-set-key (kbd "<menu> SPC f p") 'fill-paragraph)))
#+end_src

*** # m: modes
#+begin_src emacs-lisp
  (when (string= system-type "windows-nt")
    (progn
     (global-set-key (kbd "H-SPC m e") 'emacs-lisp-mode)
     (global-set-key (kbd "H-SPC m i") 'lisp-interaction-mode)
     (global-set-key (kbd "H-SPC m w") 'pio-wc-mode)
     (global-set-key (kbd "H-SPC m r") 'read-only-mode)
     (global-set-key (kbd "H-SPC m l") 'emacs-lock-mode)))

  (when (string= system-type "gnu/linux")
    (progn
     (global-set-key (kbd "<menu> SPC m e") 'emacs-lisp-mode)
     (global-set-key (kbd "<menu> SPC m i") 'lisp-interaction-mode)
     (global-set-key (kbd "<menu> SPC m w") 'pio-wc-mode)
     (global-set-key (kbd "<menu> SPC m r") 'read-only-mode)
     (global-set-key (kbd "<menu> SPC m l") 'emacs-lock-mode)))
#+end_src

*** # f: misc. func.
#+begin_src emacs-lisp
  (if (string= system-type "windows-nt")
      (global-set-key (kbd "H-SPC f t") 'pio/emacs-init-time)
    (global-set-key (kbd "s-SPC f t") 'pio/emacs-init-time))
#+end_src

** manjaro  & antergos >> <menu> zamiast H
#+begin_src emacs-lisp :results silent
  (when (pk/system-linux-p)
    ;;(global-set-key (kbd "<menu> d") 'dired)
    (global-set-key (kbd "<menu> 1") 'delete-other-windows)
    (global-set-key (kbd "<menu> 2") 'pk/split-and-switch-b) ; zamiast: 'split-window-below
    (global-set-key (kbd "<menu> 3") 'pk/split-and-switch-r) ; zamiast: 'split-window-right
    (global-set-key (kbd "<menu> 4") 'clone-indirect-buffer-other-window)
    (global-set-key (kbd "<menu> 0") 'delete-window)
    (global-set-key (kbd "<menu> a") 'universal-argument)
    (global-set-key (kbd "<menu> s") 'swiper)
    (global-set-key (kbd "<menu> q") 'eval-last-sexp)
    ;; kopiuj do notesu
    (global-set-key (kbd "<menu> c") 'pio/copy-to-notes)
    (global-set-key (kbd "<menu> v") 'pio/copy-to-notes-clean)
    (global-set-key (kbd "<menu> x") 'pio/copy-to-notes-clear)
    (global-set-key (kbd "<menu> l") 'pio/copy-to-notes-interlinia)
    (global-set-key (kbd "<menu> L") 'pio/copy-to-notes-interlinia-reset)
    ;; dabrev! (+ C-M-/ 'dabrev-completion)
    (global-set-key (kbd "<menu> <tab>") 'dabbrev-expand) 
    ;;  (global-set-key (kbd "<menu> c") 'pk-copy-line)
    (global-set-key (kbd "<menu> z") 'dired)
    ;; org shiftup and down
    (global-set-key (kbd "<menu> i") 'org-shiftup)
    (global-set-key (kbd "<menu> k") 'org-shiftdown)
    (global-set-key (kbd "<menu> t") 'pio/insert-date)
    (global-set-key (kbd "s-\\") 'dired)
    (global-set-key (kbd "s-i") 'swiper)
    (global-set-key (kbd "<menu> SPC t k") 'pk/toggle-cursor-color)
    (global-set-key (kbd "<menu> SPC t d") 'pk/set-cursor-color-to-default))

(global-set-key (kbd "<menu> w") 'pk-ewwr-dwim)
(global-set-key (kbd "<menu> W") 'pk-ewwb-dwim)
#+end_src

** [off] kbd + macro
#+begin_src emacs-lisp
;  (global-set-key (kbd "<f5>") 'agenda-b)
#+end_src

* ostatnie (fixme?)
#+begin_src emacs-lisp
(require 'warnings)
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
#+end_src

